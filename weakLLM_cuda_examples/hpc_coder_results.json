[
  {
    "id": "s001607624.cpp",
    "original_c": "#include<iostream>\nusing namespace std;\nint main(){\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    for(int i=1;i<10;i++)\n        for(int j=1;j<10;j++)\n            cout << i << \"x\" << j << \"=\" << i*j << \"\\n\";\n}",
    "translated_code": "#include<iostream>\nusing namespace std;\n__global__ void print_table(int *table){\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if(idx < 100)\n        printf(\"%d x %d = %d\\n\", idx/10, idx%10, table[idx]);\n}\nint main(){\n    int table[100];\n    for(int i=0;i<100;i++)\n        table[i] = i+1;\n    int *d_table;\n    cudaMalloc((void **)&d_table, 100*sizeof(int));\n    cudaMemcpy(d_table, table, 100*sizeof(int), cudaMemcpyHostToDevice);\n    print_table<<<1,100>>>(d_table);\n    cudaDeviceSynchronize();\n    cudaFree(d_table);\n}",
    "source": "/tmp/tmpd9n9oeu2/program_0.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_0",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "9 x 6 = 97\n9 x 7 = 98\n9 x 8 = 99\n9 x 9 = 100\n0 x 0 = 1\n0 x 1 = 2\n0 x 2 = 3\n0 x 3 = 4\n0 x 4 = 5\n0 x 5 = 6\n0 x 6 = 7\n0 x 7 = 8\n0 x 8 = 9\n0 x 9 = 10\n1 x 0 = 11\n1 x 1 = 12\n1 x 2 = 13\n1 x 3 = 14\n1 x 4 = 15\n1 x 5 = 16\n1 x 6 = 17\n1 x 7 = 18\n1 x 8 = 19\n1 x 9 = 20\n2 x 0 = 21\n2 x 1 = 22\n2 x 2 = 23\n2 x 3 = 24\n2 x 4 = 25\n2 x 5 = 26\n2 x 6 = 27\n2 x 7 = 28\n2 x 8 = 29\n2 x 9 = 30\n3 x 0 = 31\n3 x 1 = 32\n3 x 2 = 33\n3 x 3 = 34\n3 x 4 = 35\n3 x 5 = 36\n3 x 6 = 37\n3 x 7 = 38\n3 x 8 = 39\n3 x 9 = 40\n4 x 0 = 41\n4 x 1 = 42\n4 x 2 = 43\n4 x 3 = 44\n4 x 4 = 45\n4 x 5 = 46\n4 x 6 = 47\n4 x 7 = 48\n4 x 8 = 49\n4 x 9 = 50\n5 x 0 = 51\n5 x 1 = 52\n5 x 2 = 53\n5 x 3 = 54\n5 x 4 = 55\n5 x 5 = 56\n5 x 6 = 57\n5 x 7 = 58\n5 x 8 = 59\n5 x 9 = 60\n6 x 0 = 61\n6 x 1 = 62\n6 x 2 = 63\n6 x 3 = 64\n6 x 4 = 65\n6 x 5 = 66\n6 x 6 = 67\n6 x 7 = 68\n6 x 8 = 69\n6 x 9 = 70\n7 x 0 = 71\n7 x 1 = 72\n7 x 2 = 73\n7 x 3 = 74\n7 x 4 = 75\n7 x 5 = 76\n7 x 6 = 77\n7 x 7 = 78\n7 x 8 = 79\n7 x 9 = 80\n8 x 0 = 81\n8 x 1 = 82\n8 x 2 = 83\n8 x 3 = 84\n8 x 4 = 85\n8 x 5 = 86\n8 x 6 = 87\n8 x 7 = 88\n8 x 8 = 89\n8 x 9 = 90\n9 x 0 = 91\n9 x 1 = 92\n9 x 2 = 93\n9 x 3 = 94\n9 x 4 = 95\n9 x 5 = 96",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s003971419.cpp",
    "original_c": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\ntypedef pair<ll, ll> P;\n\n#define EACH(i,a) for (auto& i : a)\n#define FOR(i,a,b) for (ll i=(a);i<(b);i++)\n#define RFOR(i,a,b) for (ll i=(b)-1;i>=(a);i--)\n#define REP(i,n) for (ll i=0;i<(n);i++)\n#define RREP(i,n) for (ll i=(n)-1;i>=0;i--)\n#define debug(x) cout<<#x<<\": \"<<x<<endl\n#define pb push_back\n#define ALL(a) (a).begin(),(a).end()\n\nconst ll linf = 1e18;\nconst int inf = 1e9;\nconst double eps = 1e-12;\nconst double pi = acos(-1);\n\ntemplate<typename T>\nistream& operator>>(istream& is, vector<T>& vec) {\n\tEACH(x,vec) is >> x;\n\treturn is;\n}\ntemplate<typename T>\nostream& operator<<(ostream& os, vector<T>& vec) {\n\tREP(i,vec.size()) {\n\t\tif (i) os << \" \";\n\t\tos << vec[i];\n\t}\n\treturn os;\n}\ntemplate<typename T>\nostream& operator<<(ostream& os, vector< vector<T> >& vec) {\n\tREP(i,vec.size()) {\n\t\tif (i) os << endl;\n\t\tos << vec[i];\n\t}\n\treturn os;\n}\n\nint main() {\n\tstd::ios::sync_with_stdio(false);\n\tstd::cin.tie(0);\n\tFOR(i, 1, 10) FOR(j, 1, 10) {\n\t\tcout << i << \"x\" << j << \"=\" << i*j << endl;\n\t}\n}",
    "translated_code": "#include <stdio.h>\n\nint main() {\n\tint i, j;\n\tfor (i = 1; i < 10; i++) {\n\t\tfor (j = 1; j < 10; j++) {\n\t\t\tprintf(\"%dx%d=%d\\n\", i, j, i*j);\n\t\t}\n\t}\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_1.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_1",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1x1=1\n1x2=2\n1x3=3\n1x4=4\n1x5=5\n1x6=6\n1x7=7\n1x8=8\n1x9=9\n2x1=2\n2x2=4\n2x3=6\n2x4=8\n2x5=10\n2x6=12\n2x7=14\n2x8=16\n2x9=18\n3x1=3\n3x2=6\n3x3=9\n3x4=12\n3x5=15\n3x6=18\n3x7=21\n3x8=24\n3x9=27\n4x1=4\n4x2=8\n4x3=12\n4x4=16\n4x5=20\n4x6=24\n4x7=28\n4x8=32\n4x9=36\n5x1=5\n5x2=10\n5x3=15\n5x4=20\n5x5=25\n5x6=30\n5x7=35\n5x8=40\n5x9=45\n6x1=6\n6x2=12\n6x3=18\n6x4=24\n6x5=30\n6x6=36\n6x7=42\n6x8=48\n6x9=54\n7x1=7\n7x2=14\n7x3=21\n7x4=28\n7x5=35\n7x6=42\n7x7=49\n7x8=56\n7x9=63\n8x1=8\n8x2=16\n8x3=24\n8x4=32\n8x5=40\n8x6=48\n8x7=56\n8x8=64\n8x9=72\n9x1=9\n9x2=18\n9x3=27\n9x4=36\n9x5=45\n9x6=54\n9x7=63\n9x8=72\n9x9=81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s008310714.cpp",
    "original_c": "#include <iostream>\n\n int main() {\n\n\n\t int ans = 0;\n\n\t for (int i = 0; i < 9; ++i) {\n\t\t \n\t\t for (int n = 0; n < 9; ++n) {\n\t\t\t ans = (n + 1) * (i + 1);\n\n\t\t\t std::cout << i + 1 << \"x\" << n + 1 << \"=\" << ans << std::endl;\n\n\t\t }\n\n\t }\n\n }",
    "translated_code": "#include <stdio.h>\n\n__global__ void print_table(int ans) {\n\n\tint i = blockIdx.x * blockDim.x + threadIdx.x;\n\tint n = blockIdx.y * blockDim.y + threadIdx.y;\n\n\tif (i < 9 && n < 9) {\n\t\tans = (n + 1) * (i + 1);\n\t\tprintf(\"%d x %d = %d\\n\", i + 1, n + 1, ans);\n\t}\n\n}\n\nint main() {\n\n\tint ans = 0;\n\n\tdim3 threadsPerBlock(9, 9);\n\tdim3 numBlocks(1, 1);\n\n\tprint_table<<<numBlocks, threadsPerBlock>>>(ans);\n\n\tcudaDeviceSynchronize();\n\n\treturn 0;\n\n}",
    "source": "/tmp/tmpd9n9oeu2/program_2.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_2",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "2 x 8 = 16\n3 x 8 = 24\n4 x 8 = 32\n5 x 8 = 40\n6 x 8 = 48\n7 x 8 = 56\n8 x 8 = 64\n9 x 8 = 72\n1 x 9 = 9\n2 x 9 = 18\n3 x 9 = 27\n4 x 9 = 36\n5 x 9 = 45\n6 x 9 = 54\n7 x 9 = 63\n8 x 9 = 72\n9 x 9 = 81\n1 x 1 = 1\n2 x 1 = 2\n3 x 1 = 3\n4 x 1 = 4\n5 x 1 = 5\n6 x 1 = 6\n7 x 1 = 7\n8 x 1 = 8\n9 x 1 = 9\n1 x 2 = 2\n2 x 2 = 4\n3 x 2 = 6\n4 x 2 = 8\n5 x 2 = 10\n6 x 2 = 12\n7 x 2 = 14\n8 x 2 = 16\n9 x 2 = 18\n1 x 3 = 3\n2 x 3 = 6\n3 x 3 = 9\n4 x 3 = 12\n5 x 3 = 15\n6 x 3 = 18\n7 x 3 = 21\n8 x 3 = 24\n9 x 3 = 27\n1 x 4 = 4\n2 x 4 = 8\n3 x 4 = 12\n4 x 4 = 16\n5 x 4 = 20\n6 x 4 = 24\n7 x 4 = 28\n8 x 4 = 32\n9 x 4 = 36\n1 x 5 = 5\n2 x 5 = 10\n3 x 5 = 15\n4 x 5 = 20\n5 x 5 = 25\n6 x 5 = 30\n7 x 5 = 35\n8 x 5 = 40\n9 x 5 = 45\n1 x 6 = 6\n2 x 6 = 12\n3 x 6 = 18\n4 x 6 = 24\n5 x 6 = 30\n6 x 6 = 36\n7 x 6 = 42\n8 x 6 = 48\n9 x 6 = 54\n1 x 7 = 7\n2 x 7 = 14\n3 x 7 = 21\n4 x 7 = 28\n5 x 7 = 35\n6 x 7 = 42\n7 x 7 = 49\n8 x 7 = 56\n9 x 7 = 63\n1 x 8 = 8",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s008456021.cpp",
    "original_c": "#include<iostream>\nusing namespace std;\n\nint main(){\n  int i,j;\n\n  for(i=1;i<=9;i++){\n    for(j=1;j<=9;j++){\n      cout << i << 'x' << j << '=' << i*j << '\\n';\n    }\n    j=1;\n  }\n\n}",
    "translated_code": "#include<iostream>\nusing namespace std;\n\n__global__ void multiply(int *a, int *b, int *c, int n) {\n  int i = blockIdx.x * blockDim.x + threadIdx.x;\n  if (i < n) {\n    c[i] = a[i] * b[i];\n  }\n}\n\nint main() {\n  int n = 10;\n  int *a, *b, *c;\n  a = (int *)malloc(n * sizeof(int));\n  b = (int *)malloc(n * sizeof(int));\n  c = (int *)malloc(n * sizeof(int));\n\n  // Initialize a and b arrays\n\n  multiply<<<1, n>>>(a, b, c, n);\n\n  // Print the result\n\n  free(a);\n  free(b);\n  free(c);\n\n  return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_3.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_3",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s008585512.cpp",
    "original_c": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<map>\n#include<deque>\n#include<cstring>\n#include<climits>\n#include<cassert>\n#include<cctype>\n\n#define REP(i,s,n) for(int i=s;i<n;++i)\n#define rep(i,n) REP(i,0,n)\n\nusing namespace std;\n\nbool ma[100000];\nint main() {\n  map<int,int> mp;\n  rep(i,9) rep(j,9) {\n    mp[j+i*9] = (int)mp.size();\n    cout << i+1 << 'x' << j+1 << '=' << (i+1)*(j+1) << endl;\n  }\n  \n  return 0;\n}",
    "translated_code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<map>\n#include<deque>\n#include<cstring>\n#include<climits>\n#include<cassert>\n#include<cctype>\n\n#define REP(i,s,n) for(int i=s;i<n;++i)\n#define rep(i,n) REP(i,0,n)\n\nusing namespace std;\n\nbool ma[100000];\nint main() {\n  map<int,int> mp;\n  rep(i,9) rep(j,9) {\n    mp[j+i*9] = (int)mp.size();\n    printf(\"%d x %d = %d\\n\", i+1, j+1, (i+1)*(j+1));\n  }\n  \n  return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_4.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_4",
    "compile_stdout": "",
    "compile_stderr": "/usr/include/c++/11/bits/std_function.h:435:145: error: parameter packs not expanded with \u2018...\u2019:\n  435 |         function(_Functor&& __f)\n      |                                                                                                                                                 ^ \n/usr/include/c++/11/bits/std_function.h:435:145: note:         \u2018_ArgTypes\u2019\n/usr/include/c++/11/bits/std_function.h:530:146: error: parameter packs not expanded with \u2018...\u2019:\n  530 |         operator=(_Functor&& __f)\n      |                                                                                                                                                  ^ \n/usr/include/c++/11/bits/std_function.h:530:146: note:         \u2018_ArgTypes\u2019",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s012378771.cpp",
    "original_c": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    for(int i=1; i<=9; i++){\n        for(int j=1; j<=9; j++){\n            cout<<i<<'x'<<j<<'='<<i*j<<'\\n';\n        }\n    }\n    return 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void print_table(int start, int end) {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx >= start && idx <= end) {\n        for (int i = 1; i <= 9; i++) {\n            printf(\"%d x %d = %d\\n\", idx, i, idx * i);\n        }\n    }\n}\n\nint main() {\n    int start = 1;\n    int end = 9;\n    int threads_per_block = 256;\n    int blocks_per_grid = (end - start + 1 + threads_per_block - 1) / threads_per_block;\n    print_table<<<blocks_per_grid, threads_per_block>>>(start, end);\n    cudaDeviceSynchronize();\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_5.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_5",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n2 x 1 = 2\n3 x 1 = 3\n4 x 1 = 4\n5 x 1 = 5\n6 x 1 = 6\n7 x 1 = 7\n8 x 1 = 8\n9 x 1 = 9\n1 x 2 = 2\n2 x 2 = 4\n3 x 2 = 6\n4 x 2 = 8\n5 x 2 = 10\n6 x 2 = 12\n7 x 2 = 14\n8 x 2 = 16\n9 x 2 = 18\n1 x 3 = 3\n2 x 3 = 6\n3 x 3 = 9\n4 x 3 = 12\n5 x 3 = 15\n6 x 3 = 18\n7 x 3 = 21\n8 x 3 = 24\n9 x 3 = 27\n1 x 4 = 4\n2 x 4 = 8\n3 x 4 = 12\n4 x 4 = 16\n5 x 4 = 20\n6 x 4 = 24\n7 x 4 = 28\n8 x 4 = 32\n9 x 4 = 36\n1 x 5 = 5\n2 x 5 = 10\n3 x 5 = 15\n4 x 5 = 20\n5 x 5 = 25\n6 x 5 = 30\n7 x 5 = 35\n8 x 5 = 40\n9 x 5 = 45\n1 x 6 = 6\n2 x 6 = 12\n3 x 6 = 18\n4 x 6 = 24\n5 x 6 = 30\n6 x 6 = 36\n7 x 6 = 42\n8 x 6 = 48\n9 x 6 = 54\n1 x 7 = 7\n2 x 7 = 14\n3 x 7 = 21\n4 x 7 = 28\n5 x 7 = 35\n6 x 7 = 42\n7 x 7 = 49\n8 x 7 = 56\n9 x 7 = 63\n1 x 8 = 8\n2 x 8 = 16\n3 x 8 = 24\n4 x 8 = 32\n5 x 8 = 40\n6 x 8 = 48\n7 x 8 = 56\n8 x 8 = 64\n9 x 8 = 72\n1 x 9 = 9\n2 x 9 = 18\n3 x 9 = 27\n4 x 9 = 36\n5 x 9 = 45\n6 x 9 = 54\n7 x 9 = 63\n8 x 9 = 72\n9 x 9 = 81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s014423648.cpp",
    "original_c": "#include <stdio.h>\n\n#define FOR(i,a,b) for(int i=(int)a;i<(int)b;++i)\n#define REP(i,n) FOR(i,0,n)\n\nint main()\n{\n  FOR(i,1,10) {\n    FOR(j,1,10) {\n      printf(\"%dx%d=%d\\n\",i,j,i*j);\n    }\n  }\n  return 0;\n}\n",
    "translated_code": "#include <stdio.h>\n\n#define FOR(i,a,b) for(int i=(int)a;i<(int)b;++i)\n#define REP(i,n) FOR(i,0,n)\n\n__global__ void kernel(int *a, int *b)\n{\n  int i = blockIdx.x * blockDim.x + threadIdx.x;\n  int j = blockIdx.y * blockDim.y + threadIdx.y;\n  if (i < 10 && j < 10) {\n    printf(\"%dx%d=%d\\n\",i,j,i*j);\n  }\n}\n\nint main()\n{\n  int a[10][10];\n  int b[10][10];\n  REP(i,10) REP(j,10) {\n    a[i][j] = i*j;\n    b[i][j] = i*j;\n  }\n  int *d_a, *d_b;\n  cudaMalloc((void **)&d_a, 10*10*sizeof(int));\n  cudaMalloc((void **)&d_b, 10*10*sizeof(int));\n  cudaMemcpy(d_a, a, 10*10*sizeof(int), cudaMemcpyHostToDevice);\n  cudaMemcpy(d_b, b, 10*10*sizeof(int), cudaMemcpyHostToDevice);\n  dim3 threadsPerBlock(16, 16);\n  dim3 numBlocks((10+threadsPerBlock.x-1)/threadsPerBlock.x, (10+threadsPerBlock.y-1)/threadsPerBlock.y);\n  kernel<<<numBlocks, threadsPerBlock>>>(d_a, d_b);\n  cudaMemcpy(a, d_a, 10*10*sizeof(int), cudaMemcpyDeviceToHost);\n  cudaMemcpy(b, d_b, 10*",
    "source": "/tmp/tmpd9n9oeu2/program_6.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_6",
    "compile_stdout": "",
    "compile_stderr": "At end of source: error: expected an expression\n\nAt end of source: error: expected a \")\"\n\nAt end of source: error: too few arguments in function call\n\nAt end of source: error: expected a \";\"\n\nAt end of source: error: expected a \"}\"\n\n5 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_6.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s016418112.cpp",
    "original_c": "#include<stdio.h>\nint main()\n{\n    int n,p;\n    for(p=1;p<=9;p++)\n    {\n    for(n=1;n<10;n++)\n    {\n        printf(\"%dx%d=%d\\n\",p,n,p*n);\n    }\n    }\n    return 0;\n}\n\n",
    "translated_code": "#include<stdio.h>\n__global__ void print_table(int p, int n)\n{\n    printf(\"%dx%d=%d\\n\",p,n,p*n);\n}\nint main()\n{\n    int p,n;\n    for(p=1;p<=9;p++)\n    {\n    for(n=1;n<10;n++)\n    {\n        print_table<<<1,1>>>(p,n);\n    }\n    }\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_7.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_7",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s017262325.cpp",
    "original_c": "#include <stdio.h>\n\nint main()\n{\n    int i, j;\n    for(i = 1; i <= 9; ++i)\n        for(j = 1; j <= 9; ++j)\n            printf(\"%dx%d=%d\\n\", i, j, i * j);\n    return 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void multiply(int *a, int *b, int *c)\n{\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (i < 10)\n    {\n        for (int j = 1; j <= 9; ++j)\n        {\n            c[i * 9 + j] = a[i] * b[j];\n        }\n    }\n}\n\nint main()\n{\n    int a[10], b[9], c[10];\n    for (int i = 0; i < 10; ++i)\n    {\n        a[i] = i + 1;\n        b[i] = i + 1;\n    }\n\n    int *d_a, *d_b, *d_c;\n    cudaMalloc((void **)&d_a, 10 * sizeof(int));\n    cudaMalloc((void **)&d_b, 9 * sizeof(int));\n    cudaMalloc((void **)&d_c, 10 * sizeof(int));\n\n    cudaMemcpy(d_a, a, 10 * sizeof(int), cudaMemcpyHostToDevice);\n    cudaMemcpy(d_b, b, 9 * sizeof(int), cudaMemcpyHostToDevice);\n\n    multiply<<<1, 10>>>(d_a, d_b, d_c);\n\n    cudaMemcpy(c, d_c, 10 * sizeof(int), cudaMemcpyDeviceToHost);\n\n    for (int i = 0; i < 10; ++i)\n    {\n        for (int j = 1; j <= 9; ++j)\n        {\n            printf(\"%dx%d=%d\\n\", i + 1, j, c[i * 9 + j]);\n        }\n    }\n\n    cudaFree(d_a);\n    cudaFree(d_b);\n    cudaFree(d_c);\n\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_8.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_8",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1x1=2\n1x2=3\n1x3=4\n1x4=5\n1x5=6\n1x6=7\n1x7=8\n1x8=9\n1x9=0\n2x1=1364284160\n2x2=-1831557908\n2x3=1\n2x4=0\n2x5=-1316840048\n2x6=28841\n2x7=327692016\n2x8=0\n2x9=-1885155731\n3x1=22244\n3x2=-1313542080\n3x3=1\n3x4=1755023480\n3x5=32765\n3x6=0\n3x7=0\n3x8=-930905634\n3x9=1152717182\n4x1=1755023480\n4x2=32765\n4x3=-1885155731\n4x4=22244\n4x5=-1884540896\n4x6=22244\n4x7=-1313542080\n4x8=28841\n4x9=-966688290\n5x1=-1152401335\n5x2=-234257954\n5x3=-1511624069\n5x4=0\n5x5=0\n5x6=0\n5x7=0\n5x8=0\n5x9=0\n6x1=-1885154459\n6x2=22244\n6x3=0\n6x4=0\n6x5=1364284160\n6x6=-1831557908\n6x7=0\n6x8=0\n6x9=-1316839872\n7x1=28841\n7x2=1755023496\n7x3=32765\n7x4=-1884540896\n7x5=22244\n7x6=-1313537312\n7x7=28841\n7x8=0\n7x9=0\n8x1=0\n8x2=0\n8x3=-1885156016\n8x4=22244\n8x5=1755023472\n8x6=32765\n8x7=0\n8x8=0\n8x9=0\n9x1=0\n9x2=-1885155979\n9x3=22244\n9x4=1755023464\n9x5=32765\n9x6=28\n9x7=0\n9x8=1\n9x9=0\n10x1=1755029522\n10x2=32765\n10x3=0\n10x4=0\n10x5=1755029549\n10x6=32765\n10x7=1755029565\n10x8=32765\n10x9=1755029721",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s018321295.cpp",
    "original_c": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<ll> vl;\ntypedef complex<double> P;\ntypedef pair<int,int> pii;\n#define REP(i,n) for(ll i=0;i<n;++i)\n#define REPR(i,n) for(ll i=1;i<n;++i)\n#define FOR(i,a,b) for(ll i=a;i<b;++i)\n\n#define DEBUG(x) cout<<#x<<\": \"<<x<<endl\n#define DEBUG_VEC(v) cout<<#v<<\":\";REP(i,v.size())cout<<\" \"<<v[i];cout<<endl\n#define ALL(a) (a).begin(),(a).end()\n\n#define MOD (ll)(1e9+7)\n#define ADD(a,b) a=((a)+(b))%MOD\n#define FIX(a) ((a)%MOD+MOD)%MOD\n\nint main(){\n  REP(i,9)REP(j,9){\n    int x = i+1;\n    int y = j+1;\n    cout << x << 'x' << y << '=' << (x*y) << endl;\n  }\n  return 0;\n}",
    "translated_code": "#include <stdio.h>\n\nint main(){\n  int i, j;\n  for(i=1;i<=9;i++){\n    for(j=1;j<=9;j++){\n      printf(\"%d x %d = %d\\n\", i, j, i*j);\n    }\n  }\n  return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_9.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_9",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n6 x 1 = 6\n6 x 2 = 12\n6 x 3 = 18\n6 x 4 = 24\n6 x 5 = 30\n6 x 6 = 36\n6 x 7 = 42\n6 x 8 = 48\n6 x 9 = 54\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n8 x 1 = 8\n8 x 2 = 16\n8 x 3 = 24\n8 x 4 = 32\n8 x 5 = 40\n8 x 6 = 48\n8 x 7 = 56\n8 x 8 = 64\n8 x 9 = 72\n9 x 1 = 9\n9 x 2 = 18\n9 x 3 = 27\n9 x 4 = 36\n9 x 5 = 45\n9 x 6 = 54\n9 x 7 = 63\n9 x 8 = 72\n9 x 9 = 81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s020914857.cpp",
    "original_c": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n  int m,n;\n  \n  m=1;\n  n=1;\n\n  while(true){\n    if(n==10){\n      m=m+1;\n      n=1;\n    }\n    if(m==10) break;\n    \n    cout << m << 'x' << n << \"=\" << m*n << endl;\n    n++;\n\n  }\n  return 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void print_table(int m, int n) {\n  int idx = threadIdx.x + blockIdx.x * blockDim.x;\n  if (idx < m) {\n    for (int i = 1; i <= n; i++) {\n      printf(\"%d x %d = %d\\n\", idx, i, idx * i);\n    }\n  }\n}\n\nint main() {\n  int m, n;\n  m = 1;\n  n = 1;\n\n  while (true) {\n    if (n == 10) {\n      m++;\n      n = 1;\n    }\n    if (m == 10) break;\n\n    print_table<<<1, 1>>>(m, n);\n    cudaDeviceSynchronize();\n    n++;\n  }\n  return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_10.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_10",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "0 x 1 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 9 = 0\n0 x 1 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 9 = 0\n0 x 1 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 9 = 0\n0 x 1 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 9 = 0\n0 x 1 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 9 = 0\n0 x 1 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 9 = 0\n0 x 1 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 9 = 0\n0 x 1 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 9 = 0\n0 x 1 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 9 = 0",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s022378867.cpp",
    "original_c": "#include<iostream>\n\nusing namespace std;\n\nint main(){\n    int y,i;\n    for(y = 1;y < 10;y++){\n          for(i = 1;i < 10;i++){\n          cout << y << \"x\" << i << \"=\" << y*i << endl;\n          }\n    }\n}",
    "translated_code": "#include<iostream>\n\nusing namespace std;\n\n__global__ void print_table(int y, int i){\n    printf(\"%d x %d = %d\\n\", y, i, y*i);\n}\n\nint main(){\n    int y,i;\n    for(y = 1;y < 10;y++){\n          for(i = 1;i < 10;i++){\n          print_table<<<1,1>>>(y,i);\n          }\n    }\n}",
    "source": "/tmp/tmpd9n9oeu2/program_11.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_11",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s027024029.cpp",
    "original_c": "#include <iostream>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <map>\n#include <set>\n#include <list>\n#include <deque>\n#include <algorithm>\n#include <iomanip>\n#include <functional>\n\n#define REP(i, n) for(int i = 0;i < (n); i++)\n#define REP2(i, x, n) for(int i = (x); i < (n); i++)\n#define REPR(i, n) for(int i = (n); i >= 0; i--)\n\n#define ALL(a) (a).begin(),(a).end()\n#define SORT(c) sort((c).begin(),(c).end())\n#define DESCSORT(c) sort(c.begin(), c.end(), greater<int>())\n\n#define LL long long int\n#define LD long double\n\n#define PI 3.14159265358979\n\nusing namespace std;\n\n//================================================\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\t\n\tREP2(i, 1, 10) {\n\t\tREP2(j, 1, 10) {\n\t\t\tcout << i << \"x\" << j << \"=\" << i * j <<\"\\n\";\n\t\t}\n\t}\n\n\treturn 0;\n}",
    "translated_code": "#include <stdio.h>\n#include <stdlib.h>\n\n__global__ void kernel(int *a, int *b) {\n\tint idx = threadIdx.x + blockIdx.x * blockDim.x;\n\tif (idx < 100) {\n\t\ta[idx] = idx;\n\t\tb[idx] = idx * 2;\n\t}\n}\n\nint main() {\n\tint *a, *b;\n\tint size = 100 * sizeof(int);\n\ta = (int *)malloc(size);\n\tb = (int *)malloc(size);\n\n\tkernel<<<1, 100>>>(a, b);\n\n\tREP(i, 100) {\n\t\tprintf(\"%d x %d = %d\\n\", i, i, a[i] * b[i]);\n\t}\n\n\tfree(a);\n\tfree(b);\n\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_12.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_12",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_12.cu(20): error: identifier \"i\" is undefined\n\n/tmp/tmpd9n9oeu2/program_12.cu(20): error: identifier \"REP\" is undefined\n\n/tmp/tmpd9n9oeu2/program_12.cu(20): error: expected a \";\"\n\n/tmp/tmpd9n9oeu2/program_12.cu(24): warning #12-D: parsing restarts here after previous syntax error\n\n3 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_12.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s030392173.cpp",
    "original_c": "#include <stdio.h>\n\nint main()\n{\n    int i,j;\n    for(i=1;i<10;i++)\n    {\n        for(j=1;j<10;j++)\n        {\n            printf(\"%dx%d=%d\\n\",i,j,i*j);\n        }\n    }\n    return 0;\n\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void print_multiplication_table(int start, int end)\n{\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (i >= start && i <= end)\n    {\n        for (int j = 1; j < 10; j++)\n        {\n            printf(\"%dx%d=%d\\n\", i, j, i * j);\n        }\n    }\n}\n\nint main()\n{\n    int start = 1;\n    int end = 10;\n    int blockSize = 256;\n    int numBlocks = (end - start + 1 + blockSize - 1) / blockSize;\n\n    print_multiplication_table<<<numBlocks, blockSize>>>(start, end);\n\n    cudaDeviceSynchronize();\n\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_13.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_13",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1x1=1\n2x1=2\n3x1=3\n4x1=4\n5x1=5\n6x1=6\n7x1=7\n8x1=8\n9x1=9\n10x1=10\n1x2=2\n2x2=4\n3x2=6\n4x2=8\n5x2=10\n6x2=12\n7x2=14\n8x2=16\n9x2=18\n10x2=20\n1x3=3\n2x3=6\n3x3=9\n4x3=12\n5x3=15\n6x3=18\n7x3=21\n8x3=24\n9x3=27\n10x3=30\n1x4=4\n2x4=8\n3x4=12\n4x4=16\n5x4=20\n6x4=24\n7x4=28\n8x4=32\n9x4=36\n10x4=40\n1x5=5\n2x5=10\n3x5=15\n4x5=20\n5x5=25\n6x5=30\n7x5=35\n8x5=40\n9x5=45\n10x5=50\n1x6=6\n2x6=12\n3x6=18\n4x6=24\n5x6=30\n6x6=36\n7x6=42\n8x6=48\n9x6=54\n10x6=60\n1x7=7\n2x7=14\n3x7=21\n4x7=28\n5x7=35\n6x7=42\n7x7=49\n8x7=56\n9x7=63\n10x7=70\n1x8=8\n2x8=16\n3x8=24\n4x8=32\n5x8=40\n6x8=48\n7x8=56\n8x8=64\n9x8=72\n10x8=80\n1x9=9\n2x9=18\n3x9=27\n4x9=36\n5x9=45\n6x9=54\n7x9=63\n8x9=72\n9x9=81\n10x9=90",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s032277705.cpp",
    "original_c": "#include <iostream>\nusing namespace std;\n\nint main() {\n\tint i; //x*y???x??\u00a8?????\u00a8\n\tint k; //x*y???y??\u00a8?????\u00a8\n\tint seki = 0; //?????\u00a8?????\u00a8\n\t\n\tfor(i=1;i<=9;i++){\n\t\tfor(k=1;k<=9;k++){\n\t\t\tseki = i * k; \n\t\t\tstd::cout << i;\n\t\t\tstd::cout << \"x\";\n\t\t\tstd::cout << k;\n\t\t\tstd::cout << \"=\";\n\t\t\tstd::cout << seki;\n\t\t\tstd::cout << \"\\n\";\n\t\t}\n\t}\n\t\n\treturn 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void kernel(int *seki) {\n\tint i = blockIdx.x * blockDim.x + threadIdx.x;\n\tint k = blockIdx.y * blockDim.y + threadIdx.y;\n\t\n\tif(i<=9 && k<=9) {\n\t\t*seki = i * k;\n\t\tprintf(\"%d\", i);\n\t\tprintf(\"x\");\n\t\tprintf(\"%d\", k);\n\t\tprintf(\"=\");\n\t\tprintf(\"%d\\n\", *seki);\n\t}\n}\n\nint main() {\n\tint seki;\n\tint *d_seki;\n\t\n\t// Allocate memory on the GPU\n\tcudaMalloc((void **)&d_seki, sizeof(int));\n\t\n\t// Launch the kernel\n\tkernel<<<dim3(9,9), dim3(1,1)>>>(d_seki);\n\t\n\t// Copy the result from the GPU to the CPU\n\tcudaMemcpy(&seki, d_seki, sizeof(int), cudaMemcpyDeviceToHost);\n\t\n\t// Free memory\n\tcudaFree(d_seki);\n\t\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_14.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_14",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "106443205775786131102867243428355270248811657843567130046206886855732410247061335xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx454444127410040404030138361627217616053872171658368233782572751568283550605682738=================================================================================21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21\n21",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s035670593.cpp",
    "original_c": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nint main()\n{\n\tvector<string> sv;\n\tfor (int i = 1; i <= 9; i++){\n\t\tfor (int j = 1; j <= 9; j++){\n\t\t\tstringstream ss;\n\t\t\tss << i << 'x' << j << '=' << i*j << '\\n';\n\t\t\tstring temp = ss.str();\n\t\t\tsv.push_back(temp);\n\t\t}\n\t}\n\n\t//sv.back().erase(sv.back().find('\\n'));\n\n\tfor_each(sv.begin(), sv.end() ,\n\t\t[](string tmp){\n\t\tcout << tmp;\n\t\t}\n\t);\n\n\tgetchar();\n}",
    "translated_code": "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\n__global__ void print_table(string* sv, int size) {\n\tint idx = threadIdx.x + blockIdx.x * blockDim.x;\n\tif (idx < size) {\n\t\tcout << sv[idx] << endl;\n\t}\n}\n\nint main() {\n\tvector<string> sv;\n\tfor (int i = 1; i <= 9; i++) {\n\t\tfor (int j = 1; j <= 9; j++) {\n\t\t\tstringstream ss;\n\t\t\tss << i << 'x' << j << '=' << i * j << '\\n';\n\t\t\tstring temp = ss.str();\n\t\t\tsv.push_back(temp);\n\t\t}\n\t}\n\n\tint size = sv.size();\n\tstring* d_sv;\n\tcudaMalloc((void**)&d_sv, size * sizeof(string));\n\tcudaMemcpy(d_sv, sv.data(), size * sizeof(string), cudaMemcpyHostToDevice);\n\n\tprint_table<<<(size + 255) / 256, 256>>>(d_sv, size);\n\n\tcudaFree(d_sv);\n\n\tgetchar();\n}",
    "source": "/tmp/tmpd9n9oeu2/program_15.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_15",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_15.cu(12): warning #20096-D: address of a host variable \"std::cout\" cannot be directly taken in a device function\n\n/tmp/tmpd9n9oeu2/program_15.cu(12): error: calling a __host__ function(\"std::basic_ostream<char, std::char_traits<char> >::operator <<(::std::basic_ostream<char, std::char_traits<char> >&(*)(::std::basic_ostream<char, std::char_traits<char> >&))\") from a __global__ function(\"print_table\") is not allowed\n\n/tmp/tmpd9n9oeu2/program_15.cu(12): error: identifier \"std::basic_ostream<char, std::char_traits<char> >::operator <<\" is undefined in device code\n\n/tmp/tmpd9n9oeu2/program_15.cu(12): error: calling a __host__ function(\"std::basic_ostream<T1, T2>  &  ::std::operator <<<char,     ::std::char_traits<char> , ::std::allocator<char> > (    ::std::basic_ostream<T1, T2>  &, const    ::std::__cxx11::basic_string<T1, T2, T3>  &)\") from a __global__ function(\"print_table\") is not allowed\n\n/tmp/tmpd9n9oeu2/program_15.cu(12): error: identifier \"std::operator <<<char,     ::std::char_traits<char> , ::std::allocator<char> > \" is undefined in device code\n\n/tmp/tmpd9n9oeu2/program_15.cu(12): error: identifier \"std::cout\" is undefined in device code\n\n/tmp/tmpd9n9oeu2/program_15.cu(12): error: identifier \"std::endl<char,     ::std::char_traits<char> > \" is undefined in device code\n\n6 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_15.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s037667835.cpp",
    "original_c": "#include<iostream>\nusing namespace std;\n\nint main(){\n    for (int i = 1; i < 10; i++) {\n        for (int j = 1; j < 10; j++) {\n            std::cout << i << \"x\" << j << \"=\" << i*j << \"\\n\";\n        }\n    }\n    return 0;\n}",
    "translated_code": "#include<iostream>\nusing namespace std;\n\n__global__ void print_table(int *table) {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx < 100) {\n        int i = idx / 10;\n        int j = idx % 10;\n        printf(\"%d x %d = %d\\n\", i, j, i*j);\n    }\n}\n\nint main() {\n    int *table;\n    cudaMalloc((void **)&table, 100 * sizeof(int));\n    print_table<<<1, 100>>>(table);\n    cudaDeviceSynchronize();\n    cudaFree(table);\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_16.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_16",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "9 x 6 = 54\n9 x 7 = 63\n9 x 8 = 72\n9 x 9 = 81\n0 x 0 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 9 = 0\n1 x 0 = 0\n1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n2 x 0 = 0\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n3 x 0 = 0\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n4 x 0 = 0\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n5 x 0 = 0\n5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n6 x 0 = 0\n6 x 1 = 6\n6 x 2 = 12\n6 x 3 = 18\n6 x 4 = 24\n6 x 5 = 30\n6 x 6 = 36\n6 x 7 = 42\n6 x 8 = 48\n6 x 9 = 54\n7 x 0 = 0\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n8 x 0 = 0\n8 x 1 = 8\n8 x 2 = 16\n8 x 3 = 24\n8 x 4 = 32\n8 x 5 = 40\n8 x 6 = 48\n8 x 7 = 56\n8 x 8 = 64\n8 x 9 = 72\n9 x 0 = 0\n9 x 1 = 9\n9 x 2 = 18\n9 x 3 = 27\n9 x 4 = 36\n9 x 5 = 45",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s041829482.cpp",
    "original_c": "#include <iostream>\n\nusing std::cout;\nusing std::endl;\n\nint main()\n{\n    for (int i = 1; i < 10; ++i)\n        for (int j = 1; j < 10; ++j)\n            cout << i << \"x\" << j << \"=\" << i * j << endl;\n}\n\n",
    "translated_code": "#include <stdio.h>\n\n__global__ void print_multiplication_table(int start, int end)\n{\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (i >= start && i <= end)\n    {\n        for (int j = 1; j < 10; ++j)\n            printf(\"%d x %d = %d\\n\", i, j, i * j);\n    }\n}\n\nint main()\n{\n    int start = 1;\n    int end = 10;\n    int blockSize = 256;\n    int numBlocks = (end - start + blockSize - 1) / blockSize;\n\n    print_multiplication_table<<<numBlocks, blockSize>>>(start, end);\n\n    cudaDeviceSynchronize();\n\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_17.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_17",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n2 x 1 = 2\n3 x 1 = 3\n4 x 1 = 4\n5 x 1 = 5\n6 x 1 = 6\n7 x 1 = 7\n8 x 1 = 8\n9 x 1 = 9\n10 x 1 = 10\n1 x 2 = 2\n2 x 2 = 4\n3 x 2 = 6\n4 x 2 = 8\n5 x 2 = 10\n6 x 2 = 12\n7 x 2 = 14\n8 x 2 = 16\n9 x 2 = 18\n10 x 2 = 20\n1 x 3 = 3\n2 x 3 = 6\n3 x 3 = 9\n4 x 3 = 12\n5 x 3 = 15\n6 x 3 = 18\n7 x 3 = 21\n8 x 3 = 24\n9 x 3 = 27\n10 x 3 = 30\n1 x 4 = 4\n2 x 4 = 8\n3 x 4 = 12\n4 x 4 = 16\n5 x 4 = 20\n6 x 4 = 24\n7 x 4 = 28\n8 x 4 = 32\n9 x 4 = 36\n10 x 4 = 40\n1 x 5 = 5\n2 x 5 = 10\n3 x 5 = 15\n4 x 5 = 20\n5 x 5 = 25\n6 x 5 = 30\n7 x 5 = 35\n8 x 5 = 40\n9 x 5 = 45\n10 x 5 = 50\n1 x 6 = 6\n2 x 6 = 12\n3 x 6 = 18\n4 x 6 = 24\n5 x 6 = 30\n6 x 6 = 36\n7 x 6 = 42\n8 x 6 = 48\n9 x 6 = 54\n10 x 6 = 60\n1 x 7 = 7\n2 x 7 = 14\n3 x 7 = 21\n4 x 7 = 28\n5 x 7 = 35\n6 x 7 = 42\n7 x 7 = 49\n8 x 7 = 56\n9 x 7 = 63\n10 x 7 = 70\n1 x 8 = 8\n2 x 8 = 16\n3 x 8 = 24\n4 x 8 = 32\n5 x 8 = 40\n6 x 8 = 48\n7 x 8 = 56\n8 x 8 = 64\n9 x 8 = 72\n10 x 8 = 80\n1 x 9 = 9\n2 x 9 = 18\n3 x 9 = 27\n4 x 9 = 36\n5 x 9 = 45\n6 x 9 = 54\n7 x 9 = 63\n8 x 9 = 72\n9 x 9 = 81\n10 x 9 = 90",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s045491847.cpp",
    "original_c": "#include<iostream>\n\nint main(){\n\tint a=1,b=1,i,n;\n\n\tfor(i=1;i<=9;i++){\n\t\tfor(n=1;n<=9;n++){\n\t\tstd::cout<<a<<\"x\"<<b<<\"=\"<<a*b<<std::endl;\n\t\tb=n+1;\n\t\t\t}\n\t\ta=i+1;\n\t\tb=1;\n\t\t}\n\t\n\treturn 0;\n\t}",
    "translated_code": "#include<stdio.h>\n\n__global__ void multiply(int *a, int *b, int *c, int n){\n\tint i = blockIdx.x * blockDim.x + threadIdx.x;\n\tif(i < n){\n\t\tc[i] = a[i] * b[i];\n\t}\n}\n\nint main(){\n\tint a[9] = {1,2,3,4,5,6,7,8,9};\n\tint b[9] = {1,2,3,4,5,6,7,8,9};\n\tint c[9];\n\tint n = 9;\n\n\tmultiply<<<1,n>>>(a,b,c,n);\n\n\tfor(int i=0;i<n;i++){\n\t\tprintf(\"%d x %d = %d\\n\",a[i],b[i],c[i]);\n\t}\n\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_18.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_18",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 0\n2 x 2 = 0\n3 x 3 = 124\n4 x 4 = 119\n5 x 5 = 110\n6 x 6 = 91\n7 x 7 = -1417137200\n8 x 8 = 22380\n9 x 9 = 134192",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s046074811.cpp",
    "original_c": "#include<bits/stdc++.h>\nconst long long INF = INT_MAX / 2;\nconst long long MOD = 1000000007;\nconst long double PI = 3.1415926;\n#define FOR(i,r,n) for(ll i = (ll)(r); i < (ll)(n); i++)\n#define REP(i,n) FOR(i,0,n)\n#define REP1(i,n) FOR(i,1,n)\n#define ALL(x) x.begin(),x.end()\n#define RALL(x) x.rbegin(),x.rend()\n#define ll long long int\nusing namespace std;\nll ans = 0, sum = 0, n, k, cnt = 0, w, h;\nstring s;\nvector<ll> v;\nvector < pair<ll, ll > > vp;\nvector<vector<ll> > vv(50, vector<ll>(50, INF));\nvector<string> vs;\nvector<char> vc;\nset<ll> st;\nmap<char, ll> mp;\n\n/*--------------------template--------------------*/\n\nint main()\n{\n\tREP1(i,10)\n\t{\n\t\tREP1(j,10)\n\t\t{\n\t\t\tcout << i << 'x' << j << '=' << i*j << endl;\n\t\t}\n\t}\n}",
    "translated_code": "#include<bits/stdc++.h>\nconst long long INF = INT_MAX / 2;\nconst long long MOD = 1000000007;\nconst long double PI = 3.1415926;\n#define FOR(i,r,n) for(ll i = (ll)(r); i < (ll)(n); i++)\n#define REP(i,n) FOR(i,0,n)\n#define REP1(i,n) FOR(i,1,n)\n#define ALL(x) x.begin(),x.end()\n#define RALL(x) x.rbegin(),x.rend()\n#define ll long long int\nusing namespace std;\nll ans = 0, sum = 0, n, k, cnt = 0, w, h;\nstring s;\nvector<ll> v;\nvector < pair<ll, ll > > vp;\nvector<vector<ll> > vv(50, vector<ll>(50, INF));\nvector<string> vs;\nvector<char> vc;\nset<ll> st;\nmap<char, ll> mp;\n\n/*--------------------template--------------------*/\n\nint main()\n{\n\tREP1(i,10)\n\t{\n\t\tREP1(j,10)\n\t\t{\n\t\t\tcout << i << 'x' << j << '=' << i*j << endl;\n\t\t}\n\t}\n}",
    "source": "/tmp/tmpd9n9oeu2/program_19.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_19",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_19.cu(3): warning #177-D: variable \"MOD\" was declared but never referenced\n\n/tmp/tmpd9n9oeu2/program_19.cu(4): warning #177-D: variable \"PI\" was declared but never referenced\n\n/usr/include/c++/11/bits/std_function.h:435:145: error: parameter packs not expanded with \u2018...\u2019:\n  435 |         function(_Functor&& __f)\n      |                                                                                                                                                 ^ \n/usr/include/c++/11/bits/std_function.h:435:145: note:         \u2018_ArgTypes\u2019\n/usr/include/c++/11/bits/std_function.h:530:146: error: parameter packs not expanded with \u2018...\u2019:\n  530 |         operator=(_Functor&& __f)\n      |                                                                                                                                                  ^ \n/usr/include/c++/11/bits/std_function.h:530:146: note:         \u2018_ArgTypes\u2019",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s048969575.cpp",
    "original_c": "#include <stdio.h>\n#define FOR(i, a, b) for(int i = (a); i < (b); i++)\n#define REP(i, n) for(int i = 0; i < (n); i++)\n\nint main(void){\n\tFOR(i, 1, 10) FOR(j, 1, 10) printf(\"%dx%d=%d\\n\", i, j, i*j);\n}",
    "translated_code": "#include <stdio.h>\n#define FOR(i, a, b) for(int i = (a); i < (b); i++)\n#define REP(i, n) for(int i = 0; i < (n); i++)\n\n__global__ void kernel(void){\n\tFOR(i, 1, 10) FOR(j, 1, 10) printf(\"%dx%d=%d\\n\", i, j, i*j);\n}\n\nint main(void){\n\tkernel<<<1, 1>>>();\n\tcudaDeviceSynchronize();\n}",
    "source": "/tmp/tmpd9n9oeu2/program_20.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_20",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1x1=1\n1x2=2\n1x3=3\n1x4=4\n1x5=5\n1x6=6\n1x7=7\n1x8=8\n1x9=9\n2x1=2\n2x2=4\n2x3=6\n2x4=8\n2x5=10\n2x6=12\n2x7=14\n2x8=16\n2x9=18\n3x1=3\n3x2=6\n3x3=9\n3x4=12\n3x5=15\n3x6=18\n3x7=21\n3x8=24\n3x9=27\n4x1=4\n4x2=8\n4x3=12\n4x4=16\n4x5=20\n4x6=24\n4x7=28\n4x8=32\n4x9=36\n5x1=5\n5x2=10\n5x3=15\n5x4=20\n5x5=25\n5x6=30\n5x7=35\n5x8=40\n5x9=45\n6x1=6\n6x2=12\n6x3=18\n6x4=24\n6x5=30\n6x6=36\n6x7=42\n6x8=48\n6x9=54\n7x1=7\n7x2=14\n7x3=21\n7x4=28\n7x5=35\n7x6=42\n7x7=49\n7x8=56\n7x9=63\n8x1=8\n8x2=16\n8x3=24\n8x4=32\n8x5=40\n8x6=48\n8x7=56\n8x8=64\n8x9=72\n9x1=9\n9x2=18\n9x3=27\n9x4=36\n9x5=45\n9x6=54\n9x7=63\n9x8=72\n9x9=81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s052518178.cpp",
    "original_c": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tfor(int a=0;a<9;a++){\n\t\tfor(int b=0;b<9;b++)cout<<a+1<<'x'<<b+1<<'='<<(a+1)*(b+1)<<endl;\n\t\t}\n\t}",
    "translated_code": "#include<bits/stdc++.h>\nusing namespace std;\n\n__global__ void kernel(int *a, int *b){\n\tint idx = threadIdx.x + blockIdx.x * blockDim.x;\n\tif(idx<9){\n\t\tfor(int c=0;c<9;c++)printf(\"%d*%d=%d\\n\",idx+1,c+1,(idx+1)*(c+1));\n\t}\n}\n\nint main(){\n\tint *a, *b;\n\tcudaMalloc((void **)&a, sizeof(int));\n\tcudaMalloc((void **)&b, sizeof(int));\n\n\tkernel<<<1,9>>>(a, b);\n\n\tcudaFree(a);\n\tcudaFree(b);\n\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_21.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_21",
    "compile_stdout": "",
    "compile_stderr": "/usr/include/c++/11/bits/std_function.h:435:145: error: parameter packs not expanded with \u2018...\u2019:\n  435 |         function(_Functor&& __f)\n      |                                                                                                                                                 ^ \n/usr/include/c++/11/bits/std_function.h:435:145: note:         \u2018_ArgTypes\u2019\n/usr/include/c++/11/bits/std_function.h:530:146: error: parameter packs not expanded with \u2018...\u2019:\n  530 |         operator=(_Functor&& __f)\n      |                                                                                                                                                  ^ \n/usr/include/c++/11/bits/std_function.h:530:146: note:         \u2018_ArgTypes\u2019",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s052964803.cpp",
    "original_c": "#include<iostream>\nusing namespace std;\n\nint main() {\n\tfor (int i = 0; i < 81; i++) {\n\t\tcout << i / 9 + 1 << \"x\" << i % 9 + 1 << \"=\" << (i/9+1)*(i%9+1) << endl;\n\t}\n\n\treturn 0;\n}\n",
    "translated_code": "#include<stdio.h>\n\n__global__ void print_table(int *table) {\n\tint i = blockIdx.x * blockDim.x + threadIdx.x;\n\tif (i < 81) {\n\t\tprintf(\"%d x %d = %d\\n\", i / 9 + 1, i % 9 + 1, (i/9+1)*(i%9+1));\n\t}\n}\n\nint main() {\n\tint table[81];\n\tfor (int i = 0; i < 81; i++) {\n\t\ttable[i] = i;\n\t}\n\n\tprint_table<<<1, 81>>>(table);\n\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_22.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_22",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s053700290.cpp",
    "original_c": "//\n// Created by tac on 2016/10/27.\n//\n\n#include <cstdlib>\n#include <iostream>\n\nint main() {\n    for (int i = 1; i <= 9; ++i) {\n        for (int j = 1; j <= 9; ++j) {\n            std::cout << i << \"x\" << j << \"=\" << i * j << std::endl;\n        }\n    }\n    return EXIT_SUCCESS;\n}",
    "translated_code": "#include <cstdlib>\n#include <iostream>\n\n__global__ void print_multiplication_table() {\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    int j = blockIdx.y * blockDim.y + threadIdx.y;\n    if (i <= 9 && j <= 9) {\n        printf(\"%d x %d = %d\\n\", i, j, i * j);\n    }\n}\n\nint main() {\n    int blockSize = 16;\n    int numBlocks = 9;\n    print_multiplication_table<<<numBlocks, blockSize>>>();\n    cudaDeviceSynchronize();\n    return EXIT_SUCCESS;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_23.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_23",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "0 x 0 = 0\n1 x 0 = 0\n2 x 0 = 0\n3 x 0 = 0\n4 x 0 = 0\n5 x 0 = 0\n6 x 0 = 0\n7 x 0 = 0\n8 x 0 = 0\n9 x 0 = 0",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s054008728.cpp",
    "original_c": "#include <iostream>\n\nusing namespace std;\n\nint main()\n{\nint x, y;\n\nfor (x = 1; x<= 9; x++) {\nfor (y = 1; y<= 9; y++) {\ncout << x << \"x\" << y << \"=\" << x*y<<endl;\n}\n}\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void kernel(int *x, int *y) {\nint idx = threadIdx.x + blockIdx.x * blockDim.x;\nif (idx < 100) {\nx[idx] = idx;\ny[idx] = idx;\n}\n}\n\nint main() {\nint *x, *y;\nint size = 100;\nx = (int *)malloc(size * sizeof(int));\ny = (int *)malloc(size * sizeof(int));\n\nkernel<<<1, size>>>(x, y);\n\nfor (int i = 0; i < size; i++) {\nprintf(\"%d x %d = %d\\n\", x[i], y[i], x[i] * y[i]);\n}\n\nfree(x);\nfree(y);\nreturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_24.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_24",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0\n0 x 0 = 0",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s055966910.cpp",
    "original_c": "#include <iostream>\nusing namespace std;\n\nint main(){\n\n\tint Num;\n\tint SubNum;\n\tfor(Num=1;Num!=10;Num++)\n\t{for(SubNum=1;SubNum!=10;SubNum++){\n\tcout<<Num<<\"x\"<<SubNum<<\"=\"<<Num*SubNum<<endl;\n\t}}\n\nreturn 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void multiply(int *a, int *b, int *c) {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx < 10) {\n        c[idx] = a[idx] * b[idx];\n    }\n}\n\nint main() {\n    int a[10], b[10], c[10];\n    int *d_a, *d_b, *d_c;\n\n    // Initialize arrays a and b\n    for (int i = 0; i < 10; i++) {\n        a[i] = i + 1;\n        b[i] = i + 1;\n    }\n\n    // Allocate memory on the GPU\n    cudaMalloc((void **)&d_a, 10 * sizeof(int));\n    cudaMalloc((void **)&d_b, 10 * sizeof(int));\n    cudaMalloc((void **)&d_c, 10 * sizeof(int));\n\n    // Copy data from host to device\n    cudaMemcpy(d_a, a, 10 * sizeof(int), cudaMemcpyHostToDevice);\n    cudaMemcpy(d_b, b, 10 * sizeof(int), cudaMemcpyHostToDevice);\n\n    // Launch the kernel\n    multiply<<<1, 10>>>(d_a, d_b, d_c);\n\n    // Copy data from device to host\n    cudaMemcpy(c, d_c, 10 * sizeof(int), cudaMemcpyDeviceToHost);\n\n    // Free memory\n    cudaFree(d_a);\n    cudaFree(d_b);\n    cudaFree(d_c);\n\n    // Print the result\n    for (int i = 0; i < 10; i++) {\n        printf(\"%d x %d = %d\\n\", a[i], b[i], c[i]);\n    }\n\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_25.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_25",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n2 x 2 = 4\n3 x 3 = 9\n4 x 4 = 16\n5 x 5 = 25\n6 x 6 = 36\n7 x 7 = 49\n8 x 8 = 64\n9 x 9 = 81\n10 x 10 = 100",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s057270885.cpp",
    "original_c": "#include <cstdio>\n\nvoid solvex(int x, int y){\n\tif(x > 9)return ;\n\tprintf(\"%dx%d=%d\\n\",y,x,x*y);\n\tsolvex(x+1,y);\n}\n\nvoid solvey(int y){\n\tif(y > 9)return ;\n\tsolvex(1, y);\n\tsolvey(y+1);\n}\n\nint main(){\n\tsolvey(1);\n\treturn 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void solvex(int x, int y){\n\tif(x > 9)return ;\n\tprintf(\"%dx%d=%d\\n\",y,x,x*y);\n\tsolvex(x+1,y);\n}\n\n__global__ void solvey(int y){\n\tif(y > 9)return ;\n\tsolvex(1, y);\n\tsolvey(y+1);\n}\n\nint main(){\n\tsolvey<<<1,1>>>(1);\n\tcudaDeviceSynchronize();\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_26.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_26",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_26.cu(6): error: a __global__ function call must be configured\n\n/tmp/tmpd9n9oeu2/program_26.cu(11): error: a __global__ function call must be configured\n\n/tmp/tmpd9n9oeu2/program_26.cu(12): error: a __global__ function call must be configured\n\n3 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_26.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s062717346.cpp",
    "original_c": "#include<bits/stdc++.h>\n/*#include<iostream>\n#include<stdio.h>\n#include<ctype.h>\n#include<string.h>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<climits>*/\n#define rep(i,a,b) for(int i=a;i<(b);++i)\n#define rep1(i,a,b) for(int i=a;i<=(b);++i)\n#define per(i,a,b) for(int i=a;i>(b);--i)\n#define per1(i,a,b) for(int i=a;i>=(b);--i)\n#define LL long long\n#define inf 0x7f7f7f7f\n#define N 35\nusing namespace std;\n\nint main()\n{\n\tint a=1,b=1;\n\twhile(a<10&&b<10)\n\t{\n\t\tprintf(\"%dx%d=%d\\n\",a,b,a*b);\n\t\tb++;\n\t\tif(b>9)\n\t\t{\n\t\t\ta++;\n\t\t\tb=1;\n\t\t}\n\t}\n}\n\n",
    "translated_code": "#include<stdio.h>\n#include<cuda.h>\n#include<cuda_runtime.h>\n\n__global__ void print_multiplication_table(int a, int b)\n{\n\tprintf(\"%dx%d=%d\\n\",a,b,a*b);\n}\n\nint main()\n{\n\tint a=1,b=1;\n\twhile(a<10&&b<10)\n\t{\n\t\tprint_multiplication_table<<<1,1>>>(a,b);\n\t\tb++;\n\t\tif(b>9)\n\t\t{\n\t\t\ta++;\n\t\t\tb=1;\n\t\t}\n\t}\n\tcudaDeviceSynchronize();\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_27.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_27",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1x1=1\n1x2=2\n1x3=3\n1x4=4\n1x5=5\n1x6=6\n1x7=7\n1x8=8\n1x9=9\n2x1=2\n2x2=4\n2x3=6\n2x4=8\n2x5=10\n2x6=12\n2x7=14\n2x8=16\n2x9=18\n3x1=3\n3x2=6\n3x3=9\n3x4=12\n3x5=15\n3x6=18\n3x7=21\n3x8=24\n3x9=27\n4x1=4\n4x2=8\n4x3=12\n4x4=16\n4x5=20\n4x6=24\n4x7=28\n4x8=32\n4x9=36\n5x1=5\n5x2=10\n5x3=15\n5x4=20\n5x5=25\n5x6=30\n5x7=35\n5x8=40\n5x9=45\n6x1=6\n6x2=12\n6x3=18\n6x4=24\n6x5=30\n6x6=36\n6x7=42\n6x8=48\n6x9=54\n7x1=7\n7x2=14\n7x3=21\n7x4=28\n7x5=35\n7x6=42\n7x7=49\n7x8=56\n7x9=63\n8x1=8\n8x2=16\n8x3=24\n8x4=32\n8x5=40\n8x6=48\n8x7=56\n8x8=64\n8x9=72\n9x1=9\n9x2=18\n9x3=27\n9x4=36\n9x5=45\n9x6=54\n9x7=63\n9x8=72\n9x9=81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s066437530.cpp",
    "original_c": "#include <iostream>\n\nint main()\n{\n     for(uint8_t i=1;i<10;i++)\n          for(uint8_t j=1;j<10;j++)\n               printf(\"%ux%u=%u\\n\",i,j,i*j);\n     return 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void multiply(uint8_t *a, uint8_t *b, uint8_t *c, int n)\n{\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx < n)\n    {\n        for (int i = 0; i < n; i++)\n        {\n            c[idx * n + i] = a[idx * n + i] * b[i * n + idx];\n        }\n    }\n}\n\nint main()\n{\n    uint8_t *a, *b, *c;\n    int n = 10;\n    a = (uint8_t *)malloc(n * n * sizeof(uint8_t));\n    b = (uint8_t *)malloc(n * n * sizeof(uint8_t));\n    c = (uint8_t *)malloc(n * n * sizeof(uint8_t));\n\n    // Initialize a and b\n\n    multiply<<<1, n>>>(a, b, c, n);\n\n    // Print the result\n\n    free(a);\n    free(b);\n    free(c);\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_28.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_28",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_28.cu(3): warning #1835-D: attribute \"__global__\" does not apply here\n\n/tmp/tmpd9n9oeu2/program_28.cu(3): error: incomplete type is not allowed\n\n/tmp/tmpd9n9oeu2/program_28.cu(3): error: identifier \"uint8_t\" is undefined\n\n/tmp/tmpd9n9oeu2/program_28.cu(3): error: identifier \"a\" is undefined\n\n/tmp/tmpd9n9oeu2/program_28.cu(3): error: identifier \"b\" is undefined\n\n/tmp/tmpd9n9oeu2/program_28.cu(3): error: identifier \"c\" is undefined\n\n/tmp/tmpd9n9oeu2/program_28.cu(3): error: type name is not allowed\n\n/tmp/tmpd9n9oeu2/program_28.cu(3): error: expected a \")\"\n\n/tmp/tmpd9n9oeu2/program_28.cu(4): error: expected a \";\"\n\nAt end of source: warning #12-D: parsing restarts here after previous syntax error\n\n8 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_28.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s067647311.cpp",
    "original_c": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <set>\n#include <sstream>\n\nusing namespace std;\n\nstring expr(int x, int y) {\n    stringstream ss;\n    ss << x << \"x\" << y << \"=\" << x*y;\n    return ss.str();\n}\n\nint main() {\n    set<string> c;\n    for (int i=1e3; i; --i) {\n        c.insert(expr(rand() % 9 + 1, rand() % 9 + 1));\n    }\n    for (auto it=c.begin(); it!=c.end(); ++it) {\n        cout << *it << endl;\n    }\n    return 0;\n}",
    "translated_code": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <set>\n#include <sstream>\n\nusing namespace std;\n\n__global__ void expr(int x, int y, string* c) {\n    stringstream ss;\n    ss << x << \"x\" << y << \"=\" << x*y;\n    c[threadIdx.x] = ss.str();\n}\n\nint main() {\n    set<string> c;\n    for (int i=1e3; i; --i) {\n        c.insert(expr(rand() % 9 + 1, rand() % 9 + 1));\n    }\n    for (auto it=c.begin(); it<c.end(); ++it) {\n        cout << *it << endl;\n    }\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_29.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_29",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_29.cu(18): error: too few arguments in function call\n\n/tmp/tmpd9n9oeu2/program_29.cu(20): error: no operator \"<\" matches these operands\n            operand types are: std::_Rb_tree_const_iterator<std::string> < std::_Rb_tree_const_iterator<std::string>\n\n2 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_29.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s068563260.cpp",
    "original_c": "#include <iostream>\n#include <string>\nusing namespace std;\n \nint main(){\nint a=1,b=1,c;\n\twhile(a <= 9){\n\t\twhile(b <= 9){\n   \t \tc = a*b;\n    \tcout<<a<<\"x\"<<b<<\"=\"<<c<<endl;\t\n    \tb++;\t\n\t\t}\n\tb = 1;\n\ta++;      \n    }\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void multiply(int *a, int *b, int *c) {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx < 10) {\n        for (int i = 1; i <= 9; i++) {\n            c[idx] = a[idx] * i;\n            printf(\"%d x %d = %d\\n\", a[idx], i, c[idx]);\n        }\n    }\n}\n\nint main() {\n    int a[10], b[10], c[10];\n    for (int i = 0; i < 10; i++) {\n        a[i] = i + 1;\n        b[i] = i + 1;\n    }\n    int *d_a, *d_b, *d_c;\n    cudaMalloc((void **)&d_a, 10 * sizeof(int));\n    cudaMalloc((void **)&d_b, 10 * sizeof(int));\n    cudaMalloc((void **)&d_c, 10 * sizeof(int));\n    cudaMemcpy(d_a, a, 10 * sizeof(int), cudaMemcpyHostToDevice);\n    cudaMemcpy(d_b, b, 10 * sizeof(int), cudaMemcpyHostToDevice);\n    multiply<<<1, 10>>>(d_a, d_b, d_c);\n    cudaMemcpy(c, d_c, 10 * sizeof(int), cudaMemcpyDeviceToHost);\n    for (int i = 0; i < 10; i++) {\n        printf(\"%d x %d = %d\\n\", a[i], i + 1, c[i]);\n    }\n    cudaFree(d_a);\n    cudaFree(d_b);\n    cudaFree(d_c);\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_30.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_30",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n2 x 1 = 2\n3 x 1 = 3\n4 x 1 = 4\n5 x 1 = 5\n6 x 1 = 6\n7 x 1 = 7\n8 x 1 = 8\n9 x 1 = 9\n10 x 1 = 10\n1 x 2 = 2\n2 x 2 = 4\n3 x 2 = 6\n4 x 2 = 8\n5 x 2 = 10\n6 x 2 = 12\n7 x 2 = 14\n8 x 2 = 16\n9 x 2 = 18\n10 x 2 = 20\n1 x 3 = 3\n2 x 3 = 6\n3 x 3 = 9\n4 x 3 = 12\n5 x 3 = 15\n6 x 3 = 18\n7 x 3 = 21\n8 x 3 = 24\n9 x 3 = 27\n10 x 3 = 30\n1 x 4 = 4\n2 x 4 = 8\n3 x 4 = 12\n4 x 4 = 16\n5 x 4 = 20\n6 x 4 = 24\n7 x 4 = 28\n8 x 4 = 32\n9 x 4 = 36\n10 x 4 = 40\n1 x 5 = 5\n2 x 5 = 10\n3 x 5 = 15\n4 x 5 = 20\n5 x 5 = 25\n6 x 5 = 30\n7 x 5 = 35\n8 x 5 = 40\n9 x 5 = 45\n10 x 5 = 50\n1 x 6 = 6\n2 x 6 = 12\n3 x 6 = 18\n4 x 6 = 24\n5 x 6 = 30\n6 x 6 = 36\n7 x 6 = 42\n8 x 6 = 48\n9 x 6 = 54\n10 x 6 = 60\n1 x 7 = 7\n2 x 7 = 14\n3 x 7 = 21\n4 x 7 = 28\n5 x 7 = 35\n6 x 7 = 42\n7 x 7 = 49\n8 x 7 = 56\n9 x 7 = 63\n10 x 7 = 70\n1 x 8 = 8\n2 x 8 = 16\n3 x 8 = 24\n4 x 8 = 32\n5 x 8 = 40\n6 x 8 = 48\n7 x 8 = 56\n8 x 8 = 64\n9 x 8 = 72\n10 x 8 = 80\n1 x 9 = 9\n2 x 9 = 18\n3 x 9 = 27\n4 x 9 = 36\n5 x 9 = 45\n6 x 9 = 54\n7 x 9 = 63\n8 x 9 = 72\n9 x 9 = 81\n10 x 9 = 90\n1 x 1 = 9\n2 x 2 = 18\n3 x 3 = 27\n4 x 4 = 36\n5 x 5 = 45\n6 x 6 = 54\n7 x 7 = 63\n8 x 8 = 72\n9 x 9 = 81\n10 x 10 = 90",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s068595017.cpp",
    "original_c": "#include<cstdio>\nint main(){\n\tfor(int i = 1 ;i <= 9 ; ++i){\n\t\tfor(int j = 1 ; j <= 9 ; ++j)\n\t\tprintf(\"%dx%d=%d\\n\",i,j,i*j);\n\t}\n}\n",
    "translated_code": "#include<stdio.h>\n__global__ void print_table(int start, int end){\n\tint i = blockIdx.x * blockDim.x + threadIdx.x;\n\tif(i >= start && i <= end){\n\t\tfor(int j = 1 ; j <= 9 ; ++j)\n\t\tprintf(\"%dx%d=%d\\n\",i,j,i*j);\n\t}\n}\n\nint main(){\n\tint start = 1, end = 9;\n\tprint_table<<<1,10>>>(start, end);\n\tcudaDeviceSynchronize();\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_31.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_31",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1x1=1\n2x1=2\n3x1=3\n4x1=4\n5x1=5\n6x1=6\n7x1=7\n8x1=8\n9x1=9\n1x2=2\n2x2=4\n3x2=6\n4x2=8\n5x2=10\n6x2=12\n7x2=14\n8x2=16\n9x2=18\n1x3=3\n2x3=6\n3x3=9\n4x3=12\n5x3=15\n6x3=18\n7x3=21\n8x3=24\n9x3=27\n1x4=4\n2x4=8\n3x4=12\n4x4=16\n5x4=20\n6x4=24\n7x4=28\n8x4=32\n9x4=36\n1x5=5\n2x5=10\n3x5=15\n4x5=20\n5x5=25\n6x5=30\n7x5=35\n8x5=40\n9x5=45\n1x6=6\n2x6=12\n3x6=18\n4x6=24\n5x6=30\n6x6=36\n7x6=42\n8x6=48\n9x6=54\n1x7=7\n2x7=14\n3x7=21\n4x7=28\n5x7=35\n6x7=42\n7x7=49\n8x7=56\n9x7=63\n1x8=8\n2x8=16\n3x8=24\n4x8=32\n5x8=40\n6x8=48\n7x8=56\n8x8=64\n9x8=72\n1x9=9\n2x9=18\n3x9=27\n4x9=36\n5x9=45\n6x9=54\n7x9=63\n8x9=72\n9x9=81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s071872140.cpp",
    "original_c": "#include <iostream>\n\nusing namespace std;\n\nint main(){\n\tint x, y, z;                    //x??\u00a8y??\u00a8z?????\u00a3?\u00a8???????\n\tfor(int i = 0; i < 9; i++){     //9?????\u00b0?????????(x???1???9???)\n\t\tx = i + 1;                  //x???1???9?????\u00a3??\\??????\n\t\tfor(int j = 0; j < 9; j++){ //9?????\u00b0?????????(y???1???9???)\n\t\t\ty = j + 1;              //y???1???9?????\u00a3??\\??????\n\t\t\tz = x * y;              //z???x * y?????\u00a3??\\\n\t\t\tcout << x << \"x\" << y << \"=\" << z << endl; \n\t\t}\n\t}\n\treturn 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void multiply(int *x, int *y, int *z, int n) {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx < n) {\n        z[idx] = x[idx] * y[idx];\n    }\n}\n\nint main() {\n    int x[9], y[9], z[9];\n    int n = 9;\n\n    for (int i = 0; i < n; i++) {\n        x[i] = i + 1;\n        y[i] = i + 1;\n    }\n\n    int *d_x, *d_y, *d_z;\n    cudaMalloc((void **)&d_x, n * sizeof(int));\n    cudaMalloc((void **)&d_y, n * sizeof(int));\n    cudaMalloc((void **)&d_z, n * sizeof(int));\n\n    cudaMemcpy(d_x, x, n * sizeof(int), cudaMemcpyHostToDevice);\n    cudaMemcpy(d_y, y, n * sizeof(int), cudaMemcpyHostToDevice);\n\n    multiply<<<1, n>>>(d_x, d_y, d_z, n);\n\n    cudaMemcpy(z, d_z, n * sizeof(int), cudaMemcpyDeviceToHost);\n\n    for (int i = 0; i < n; i++) {\n        printf(\"%d x %d = %d\\n\", x[i], y[i], z[i]);\n    }\n\n    cudaFree(d_x);\n    cudaFree(d_y);\n    cudaFree(d_z);\n\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_32.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_32",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n2 x 2 = 4\n3 x 3 = 9\n4 x 4 = 16\n5 x 5 = 25\n6 x 6 = 36\n7 x 7 = 49\n8 x 8 = 64\n9 x 9 = 81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s073561711.cpp",
    "original_c": "#include<iostream>\nusing namespace std;\nint main(){\n    int i=1,ii=1;\n    \n    for(i=1;i<=9;i=i+1){\n    for(ii=1;ii<=9;ii=ii+1){\n            cout<<i<<\"x\"<<ii<<\"=\"<<i*ii;\n            cout<<endl;\n    }}\n        \n    \n    \n    return 0;\n}",
    "translated_code": "#include<stdio.h>\n\n__global__ void multiply(int *a, int *b, int *c) {\n    int i = threadIdx.x;\n    c[i] = a[i] * b[i];\n}\n\nint main() {\n    int a[9] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    int b[9] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    int c[9];\n\n    multiply<<<1, 9>>>(a, b, c);\n\n    for (int i = 0; i < 9; i++) {\n        printf(\"%d x %d = %d\\n\", a[i], b[i], c[i]);\n    }\n\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_33.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_33",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 0\n2 x 2 = 0\n3 x 3 = 124\n4 x 4 = 119\n5 x 5 = 110\n6 x 6 = 91\n7 x 7 = -336641072\n8 x 8 = 24547\n9 x 9 = 134192",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s073698841.cpp",
    "original_c": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <algorithm>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cctype>\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\n\n#define all(c) ((c).begin()), ((c).end())\n#define debug(c) cerr << \"> \" << #c << \" = \" << (c) << endl;\n#define iter(c) __typeof((c).begin())\n#define tr(i, c) for (iter(c) i = (c).begin(); i != (c).end(); i++)\n#define rep(i, n) for (int i = 0; i < (int)(n); i++)\n#define REP(i, a, b) for (int i = (int)(a); i <= (int)(b); i++)\n\n#define mp make_pair\n#define fst first\n#define snd second\n#define pb push_back\n\n\nconst double EPS = 1e-10;\n\n\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\ntypedef complex<double> P;\n\n\nint main(){\n\trep(i, 9) rep(j, 9) printf(\"%dx%d=%d\\n\", i + 1, j + 1, (i + 1) * (j + 1));\n\t\n\treturn 0;\n}",
    "translated_code": "#include <stdio.h>\n\nint main(){\n\tint i, j;\n\tfor(i = 1; i <= 9; i++)\n\t\tfor(j = 1; j <= 9; j++)\n\t\t\tprintf(\"%dx%d=%d\\n\", i, j, (i + 1) * (j + 1));\n\t\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_34.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_34",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1x1=4\n1x2=6\n1x3=8\n1x4=10\n1x5=12\n1x6=14\n1x7=16\n1x8=18\n1x9=20\n2x1=6\n2x2=9\n2x3=12\n2x4=15\n2x5=18\n2x6=21\n2x7=24\n2x8=27\n2x9=30\n3x1=8\n3x2=12\n3x3=16\n3x4=20\n3x5=24\n3x6=28\n3x7=32\n3x8=36\n3x9=40\n4x1=10\n4x2=15\n4x3=20\n4x4=25\n4x5=30\n4x6=35\n4x7=40\n4x8=45\n4x9=50\n5x1=12\n5x2=18\n5x3=24\n5x4=30\n5x5=36\n5x6=42\n5x7=48\n5x8=54\n5x9=60\n6x1=14\n6x2=21\n6x3=28\n6x4=35\n6x5=42\n6x6=49\n6x7=56\n6x8=63\n6x9=70\n7x1=16\n7x2=24\n7x3=32\n7x4=40\n7x5=48\n7x6=56\n7x7=64\n7x8=72\n7x9=80\n8x1=18\n8x2=27\n8x3=36\n8x4=45\n8x5=54\n8x6=63\n8x7=72\n8x8=81\n8x9=90\n9x1=20\n9x2=30\n9x3=40\n9x4=50\n9x5=60\n9x6=70\n9x7=80\n9x8=90\n9x9=100",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s074268911.cpp",
    "original_c": "#include <stdio.h>\nint main(){\n    int n, i, s, g;\n    for(i=1, g=1; i <10;i++){\n             printf(\"%dx%d=%d\\n\", g,i, g*i);\n             if(i==9){\n             i=0;\n             g++;         \n             }\n             if(g==10)\n             break;\n             }\n    return 0;\n    }",
    "translated_code": "#include <stdio.h>\n__global__ void print_table(int n, int i, int s, int g) {\n    printf(\"%dx%d=%d\\n\", g,i, g*i);\n    if(i==9){\n        i=0;\n        g++;         \n    }\n    if(g==10)\n        return;\n}\n\nint main(){\n    int n, i, s, g;\n    for(i=1, g=1; i <10;i++){\n             print_table<<<1,1>>>(n, i, s, g);\n             if(i==9){\n             i=0;\n             g++;         \n             }\n             if(g==10)\n             break;\n             }\n    return 0;\n    }",
    "source": "/tmp/tmpd9n9oeu2/program_35.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_35",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s075045846.cpp",
    "original_c": "#include <iostream>\n\nint main(void)\n{\n  const int minNum = 1;\n  const int maxNum = 9;\n\n  for (int i = minNum; i <= maxNum; i++) {\n    for (int j = minNum; j <= maxNum; j++) {\n      std::cout << i << \"x\" << j << \"=\" << i * j << std::endl;\n    }\n  }\n\n  return 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void print_table(int minNum, int maxNum) {\n  int i = blockIdx.x * blockDim.x + threadIdx.x;\n  int j = blockIdx.y * blockDim.y + threadIdx.y;\n\n  if (i >= minNum && i <= maxNum && j >= minNum && j <= maxNum) {\n    printf(\"%d x %d = %d\\n\", i, j, i * j);\n  }\n}\n\nint main(void) {\n  const int minNum = 1;\n  const int maxNum = 9;\n\n  int blockSize = 16;\n  int numBlocks = (maxNum - minNum + 1) / blockSize;\n\n  print_table<<<numBlocks, blockSize>>>(minNum, maxNum);\n\n  cudaDeviceSynchronize();\n\n  return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_36.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_36",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s075296282.cpp",
    "original_c": "#include<iostream>\nint main() {\n\tfor (int a = 1; a <= 9; a++) {\n\t\tfor (int b = 1; b <= 9; b++) {\n\t\t\tstd::cout << a << \"x\" << b << \"=\" << a * b << std::endl;\n\t\t}\n\t}\n}\n",
    "translated_code": "#include<stdio.h>\n__global__ void multiply(int *a, int *b, int *c) {\n\tint idx = threadIdx.x + blockIdx.x * blockDim.x;\n\tif (idx < 10) {\n\t\tc[idx] = a[idx] * b[idx];\n\t}\n}\n\nint main() {\n\tint a[10], b[10], c[10];\n\tfor (int i = 0; i < 10; i++) {\n\t\ta[i] = i + 1;\n\t\tb[i] = i + 1;\n\t}\n\tint *d_a, *d_b, *d_c;\n\tcudaMalloc((void **)&d_a, 10 * sizeof(int));\n\tcudaMalloc((void **)&d_b, 10 * sizeof(int));\n\tcudaMalloc((void **)&d_c, 10 * sizeof(int));\n\tcudaMemcpy(d_a, a, 10 * sizeof(int), cudaMemcpyHostToDevice);\n\tcudaMemcpy(d_b, b, 10 * sizeof(int), cudaMemcpyHostToDevice);\n\tmultiply<<<1, 10>>>(d_a, d_b, d_c);\n\tcudaMemcpy(c, d_c, 10 * sizeof(int), cudaMemcpyDeviceToHost);\n\tfor (int i = 0; i < 10; i++) {\n\t\tprintf(\"%d x %d = %d\\n\", a[i], b[i], c[i]);\n\t}\n\tcudaFree(d_a);\n\tcudaFree(d_b);\n\tcudaFree(d_c);\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_37.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_37",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n2 x 2 = 4\n3 x 3 = 9\n4 x 4 = 16\n5 x 5 = 25\n6 x 6 = 36\n7 x 7 = 49\n8 x 8 = 64\n9 x 9 = 81\n10 x 10 = 100",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s076041968.cpp",
    "original_c": "#include <iostream>\nusing namespace std;\n\nint main() {\n    for (int l = 1; l < 10; l++) {\n        for (int r = 1; r < 10; r++) {\n            cout << l << 'x' << r << '=' << l * r << endl;\n        }\n    }\n    return 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void multiply(int *a, int *b, int *c, int n) {\n    int i = threadIdx.x + blockIdx.x * blockDim.x;\n    if (i < n) {\n        c[i] = a[i] * b[i];\n    }\n}\n\nint main() {\n    int n = 10;\n    int *a, *b, *c;\n    a = (int *)malloc(n * sizeof(int));\n    b = (int *)malloc(n * sizeof(int));\n    c = (int *)malloc(n * sizeof(int));\n\n    // Initialize a and b arrays\n\n    multiply<<<1, n>>>(a, b, c, n);\n\n    // Print the result\n\n    free(a);\n    free(b);\n    free(c);\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_38.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_38",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s082628758.cpp",
    "original_c": "#include<stdio.h>\nint n,m;\nint main()\n{\n \n\tfor(n=1;n<10;n++)\n\t{\n\t\tfor(m=1;m<10;m++)\n\t\t{\n\t\t\tprintf(\"%dx%d=%d\\n\",n,m,n*m);\n\t\t}\n\t}\nreturn 0;\n}",
    "translated_code": "#include<stdio.h>\n__global__ void multiply(int *a, int *b, int *c, int n, int m)\n{\n\tint i = blockIdx.x * blockDim.x + threadIdx.x;\n\tint j = blockIdx.y * blockDim.y + threadIdx.y;\n\tif(i<n && j<m)\n\t{\n\t\tc[i*m+j] = a[i]*b[j];\n\t}\n}\n\nint main()\n{\n\tint *a, *b, *c;\n\tint n, m;\n\tscanf(\"%d %d\", &n, &m);\n\ta = (int *)malloc(n*sizeof(int));\n\tb = (int *)malloc(m*sizeof(int));\n\tc = (int *)malloc((n*m)*sizeof(int));\n\n\t// Initialize a and b\n\n\tdim3 threadsPerBlock(16, 16);\n\tdim3 numBlocks((n+threadsPerBlock.x-1)/threadsPerBlock.x, (m+threadsPerBlock.y-1)/threadsPerBlock.y);\n\tmultiply<<<numBlocks, threadsPerBlock>>>(a, b, c, n, m);\n\n\t// Print the result\n\n\tfree(a);\n\tfree(b);\n\tfree(c);\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_39.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_39",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "",
    "run_stderr": "Timeout",
    "run_success": false
  },
  {
    "id": "s083067007.cpp",
    "original_c": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define for_(i,a,b) for(int i=(a);i<(b);++i)\n\nint main() {\n\tfor_(i,1,10) {\n\t\tfor_(j,1,10) {\n\t\t\tcout << i << \"x\" << j << \"=\" << i * j << endl;\n\t\t}\n\t}\n}",
    "translated_code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define for_(i,a,b) for(int i=(a);i<(b);++i)\n\n__global__ void print_table(int n) {\n\tint i = blockIdx.x * blockDim.x + threadIdx.x;\n\tif (i < n) {\n\t\tfor_(j,1,10) {\n\t\t\tcout << i << \"x\" << j << \"=\" << i * j << endl;\n\t\t}\n\t}\n}\n\nint main() {\n\tint n = 10;\n\tprint_table<<<1,n>>>(n);\n\tcudaDeviceSynchronize();\n}",
    "source": "/tmp/tmpd9n9oeu2/program_40.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_40",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_40.cu(10): warning #20096-D: address of a host variable \"std::cout\" cannot be directly taken in a device function\n\n/tmp/tmpd9n9oeu2/program_40.cu(10): error: calling a __host__ function(\"std::basic_ostream<char, std::char_traits<char> >::operator <<(::std::basic_ostream<char, std::char_traits<char> >&(*)(::std::basic_ostream<char, std::char_traits<char> >&))\") from a __global__ function(\"print_table\") is not allowed\n\n/tmp/tmpd9n9oeu2/program_40.cu(10): error: identifier \"std::basic_ostream<char, std::char_traits<char> >::operator <<\" is undefined in device code\n\n/tmp/tmpd9n9oeu2/program_40.cu(10): error: calling a __host__ function(\"std::basic_ostream<char, std::char_traits<char> >::operator <<(int)\") from a __global__ function(\"print_table\") is not allowed\n\n/tmp/tmpd9n9oeu2/program_40.cu(10): error: identifier \"std::basic_ostream<char, std::char_traits<char> >::operator <<\" is undefined in device code\n\n/tmp/tmpd9n9oeu2/program_40.cu(10): error: calling a __host__ function(\"std::basic_ostream<char, T1>  &  ::std::operator <<<    ::std::char_traits<char> > (    ::std::basic_ostream<char, T1>  &, const char *)\") from a __global__ function(\"print_table\") is not allowed\n\n/tmp/tmpd9n9oeu2/program_40.cu(10): error: identifier \"std::operator <<<    ::std::char_traits<char> > \" is undefined in device code\n\n/tmp/tmpd9n9oeu2/program_40.cu(10): error: calling a __host__ function(\"std::basic_ostream<char, std::char_traits<char> >::operator <<(int)\") from a __global__ function(\"print_table\") is not allowed\n\n/tmp/tmpd9n9oeu2/program_40.cu(10): error: identifier \"std::basic_ostream<char, std::char_traits<char> >::operator <<\" is undefined in device code\n\n/tmp/tmpd9n9oeu2/program_40.cu(10): error: calling a __host__ function(\"std::basic_ostream<char, T1>  &  ::std::operator <<<    ::std::char_traits<char> > (    ::std::basic_ostream<char, T1>  &, const char *)\") from a __global__ function(\"print_table\") is not allowed\n\n/tmp/tmpd9n9oeu2/program_40.cu(10): error: identifier \"std::operator <<<    ::std::char_traits<char> > \" is undefined in device code\n\n/tmp/tmpd9n9oeu2/program_40.cu(10): error: calling a __host__ function(\"std::basic_ostream<char, std::char_traits<char> >::operator <<(int)\") from a __global__ function(\"print_table\") is not allowed\n\n/tmp/tmpd9n9oeu2/program_40.cu(10): error: identifier \"std::basic_ostream<char, std::char_traits<char> >::operator <<\" is undefined in device code\n\n/tmp/tmpd9n9oeu2/program_40.cu(10): error: identifier \"std::cout\" is undefined in device code\n\n/tmp/tmpd9n9oeu2/program_40.cu(10): error: identifier \"std::endl<char,     ::std::char_traits<char> > \" is undefined in device code\n\n14 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_40.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s086704516.cpp",
    "original_c": "#include <bits/stdc++.h>\n// #include \"bits/stdc++.h\"\n\n#define pout(n)  printf (\"%d\\n\", n)\n\n#define rep(i,a,n) for (int i = a;i < n;i++)\n#define per(i,n,a) for (int i = n-1;i >= a;i--)\n\nconst int d4x[4] = {1, 0, -1, 0};\nconst int d4y[4] = {0, 1, 0, -1};\nconst int d8x[8] = { 1,1,0,-1,-1,-1,0,1 };\nconst int d8y[8] = { 0,1,1,1,0,-1,-1,-1 };\n \ntypedef long long ll;\nusing namespace std;\n \nint main() {\n  rep(i,1,10){\n    rep(j,1,10){\n      printf(\"%dx%d=%d\\n\",i,j,i*j);\n    }\n  }\n  return 0;\n}\n",
    "translated_code": "#include <stdio.h>\n\n#define pout(n)  printf (\"%d\\n\", n)\n\n#define rep(i,a,n) for (int i = a;i < n;i++)\n#define per(i,n,a) for (int i = n-1;i >= a;i--)\n\nconst int d4x[4] = {1, 0, -1, 0};\nconst int d4y[4] = {0, 1, 0, -1};\nconst int d8x[8] = { 1,1,0,-1,-1,-1,0,1 };\nconst int d8y[8] = { 0,1,1,1,0,-1,-1,-1 };\n \ntypedef long long ll;\n\n__global__ void kernel(int *a, int *b, int n) {\n  int i = blockIdx.x * blockDim.x + threadIdx.x;\n  if (i < n) {\n    a[i] = i * i;\n    b[i] = i * i * i;\n  }\n}\n\nint main() {\n  int *a, *b;\n  int n = 10;\n  cudaMalloc((void **)&a, n * sizeof(int));\n  cudaMalloc((void **)&b, n * sizeof(int));\n  kernel<<<1, n>>>(a, b, n);\n  cudaDeviceSynchronize();\n  rep(i,0,n){\n    printf(\"%dx%d=%d\\n\",i,i,a[i]);\n    printf(\"%dx%d=%d\\n\",i,i,b[i]);\n  }\n  cudaFree(a);\n  cudaFree(b);\n  return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_41.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_41",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_41.cu(8): warning #177-D: variable \"d4x\" was declared but never referenced\n\n/tmp/tmpd9n9oeu2/program_41.cu(9): warning #177-D: variable \"d4y\" was declared but never referenced\n\n/tmp/tmpd9n9oeu2/program_41.cu(10): warning #177-D: variable \"d8x\" was declared but never referenced\n\n/tmp/tmpd9n9oeu2/program_41.cu(11): warning #177-D: variable \"d8y\" was declared but never referenced",
    "compile_success": true,
    "run_stdout": "",
    "run_stderr": "",
    "run_success": false
  },
  {
    "id": "s087240108.cpp",
    "original_c": "#include <iostream>\nusing namespace std;\nint main(){\n  for(int i=1;i<10;i++)\n    for(int j=1;j<10;j++)\n      cout<<i<<'x'<<j<<\"=\"<<i*j<<\"\\n\";\n}\n\n",
    "translated_code": "#include <stdio.h>\n\n__global__ void print_multiplication_table(int start, int end) {\n  int i = blockIdx.x * blockDim.x + threadIdx.x;\n  if (i >= start && i <= end) {\n    for (int j = 1; j < 10; j++) {\n      printf(\"%d x %d = %d\\n\", i, j, i * j);\n    }\n  }\n}\n\nint main() {\n  int start = 1;\n  int end = 10;\n  int blockSize = 256;\n  int numBlocks = (end - start + blockSize - 1) / blockSize;\n  print_multiplication_table<<<numBlocks, blockSize>>>(start, end);\n  cudaDeviceSynchronize();\n  return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_42.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_42",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n2 x 1 = 2\n3 x 1 = 3\n4 x 1 = 4\n5 x 1 = 5\n6 x 1 = 6\n7 x 1 = 7\n8 x 1 = 8\n9 x 1 = 9\n10 x 1 = 10\n1 x 2 = 2\n2 x 2 = 4\n3 x 2 = 6\n4 x 2 = 8\n5 x 2 = 10\n6 x 2 = 12\n7 x 2 = 14\n8 x 2 = 16\n9 x 2 = 18\n10 x 2 = 20\n1 x 3 = 3\n2 x 3 = 6\n3 x 3 = 9\n4 x 3 = 12\n5 x 3 = 15\n6 x 3 = 18\n7 x 3 = 21\n8 x 3 = 24\n9 x 3 = 27\n10 x 3 = 30\n1 x 4 = 4\n2 x 4 = 8\n3 x 4 = 12\n4 x 4 = 16\n5 x 4 = 20\n6 x 4 = 24\n7 x 4 = 28\n8 x 4 = 32\n9 x 4 = 36\n10 x 4 = 40\n1 x 5 = 5\n2 x 5 = 10\n3 x 5 = 15\n4 x 5 = 20\n5 x 5 = 25\n6 x 5 = 30\n7 x 5 = 35\n8 x 5 = 40\n9 x 5 = 45\n10 x 5 = 50\n1 x 6 = 6\n2 x 6 = 12\n3 x 6 = 18\n4 x 6 = 24\n5 x 6 = 30\n6 x 6 = 36\n7 x 6 = 42\n8 x 6 = 48\n9 x 6 = 54\n10 x 6 = 60\n1 x 7 = 7\n2 x 7 = 14\n3 x 7 = 21\n4 x 7 = 28\n5 x 7 = 35\n6 x 7 = 42\n7 x 7 = 49\n8 x 7 = 56\n9 x 7 = 63\n10 x 7 = 70\n1 x 8 = 8\n2 x 8 = 16\n3 x 8 = 24\n4 x 8 = 32\n5 x 8 = 40\n6 x 8 = 48\n7 x 8 = 56\n8 x 8 = 64\n9 x 8 = 72\n10 x 8 = 80\n1 x 9 = 9\n2 x 9 = 18\n3 x 9 = 27\n4 x 9 = 36\n5 x 9 = 45\n6 x 9 = 54\n7 x 9 = 63\n8 x 9 = 72\n9 x 9 = 81\n10 x 9 = 90",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s088221797.cpp",
    "original_c": "#include<iostream>\nusing namespace std;\n\nint main (){\n\tint n1,n2;\n\n\tfor (n1=1; n1<=9; n1++){\n\t\tfor (n2=1; n2<=9; n2++){\n\t\t\tcout << n1 << \"x\" << n2 << \"=\" << n1*n2 << \"\\n\";\n\t\t}\n\t}\n\treturn 0;\n}",
    "translated_code": "#include<iostream>\nusing namespace std;\n\n__global__ void multiply(int *a, int *b, int *c, int n) {\n\tint idx = threadIdx.x + blockIdx.x * blockDim.x;\n\tif (idx < n) {\n\t\tc[idx] = a[idx] * b[idx];\n\t}\n}\n\nint main() {\n\tint n1, n2;\n\tint *a, *b, *c;\n\n\t// Allocate memory on the GPU\n\tcudaMalloc((void **)&a, n1 * sizeof(int));\n\tcudaMalloc((void **)&b, n2 * sizeof(int));\n\tcudaMalloc((void **)&c, n1 * n2 * sizeof(int));\n\n\t// Copy data from host to device\n\tcudaMemcpy(a, a_host, n1 * sizeof(int), cudaMemcpyHostToDevice);\n\tcudaMemcpy(b, b_host, n2 * sizeof(int), cudaMemcpyHostToDevice);\n\n\t// Launch the kernel\n\tmultiply<<<1, n1>>>(a, b, c, n1 * n2);\n\n\t// Copy data from device to host\n\tcudaMemcpy(c_host, c, n1 * n2 * sizeof(int), cudaMemcpyDeviceToHost);\n\n\t// Free memory\n\tcudaFree(a);\n\tcudaFree(b);\n\tcudaFree(c);\n\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_43.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_43",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_43.cu(16): warning #549-D: variable \"n1\" is used before its value is set\n\n/tmp/tmpd9n9oeu2/program_43.cu(17): warning #549-D: variable \"n2\" is used before its value is set\n\n/tmp/tmpd9n9oeu2/program_43.cu(21): error: identifier \"a_host\" is undefined\n\n/tmp/tmpd9n9oeu2/program_43.cu(22): error: identifier \"b_host\" is undefined\n\n/tmp/tmpd9n9oeu2/program_43.cu(28): error: identifier \"c_host\" is undefined\n\n3 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_43.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s091076962.cpp",
    "original_c": "#include <iostream>\n#include<string>\n#include<math.h>\n#include<stdio.h>\n#include <algorithm>\nusing namespace std;\nint main(void){\n    // Here your code !\nint a[9],b[9];\nint c;\n\nfor(int i=0;i<9;i++){\n a[i]=i+1;   \n b[i]=i+1;\n}\nfor(int i=0;i<9;i++){\n  for(int j=0;j<9;j++){\n  cout<<a[i]<<'x'<<b[j]<<'='<<a[i]*b[j]<<endl;    \n}\n}\nreturn 0;\n}",
    "translated_code": "#include <stdio.h>\n#include <stdlib.h>\n\n__global__ void multiply(int *a, int *b, int *c) {\n    int i = threadIdx.x;\n    c[i] = a[i] * b[i];\n}\n\nint main() {\n    int *a, *b, *c;\n    int size = 9;\n\n    // Allocate memory for arrays on the GPU\n    cudaMalloc((void **)&a, size * sizeof(int));\n    cudaMalloc((void **)&b, size * sizeof(int));\n    cudaMalloc((void **)&c, size * sizeof(int));\n\n    // Copy data from host to device\n    for (int i = 0; i < size; i++) {\n        a[i] = i + 1;\n        b[i] = i + 1;\n    }\n\n    // Launch the CUDA kernel\n    multiply<<<1, size>>>(a, b, c);\n\n    // Copy data from device to host\n    for (int i = 0; i < size; i++) {\n        printf(\"%d x %d = %d\\n\", a[i], b[i], c[i]);\n    }\n\n    // Free memory\n    cudaFree(a);\n    cudaFree(b);\n    cudaFree(c);\n\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_44.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_44",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "",
    "run_stderr": "",
    "run_success": false
  },
  {
    "id": "s091446993.cpp",
    "original_c": "#include <bits/stdc++.h>\n#define INT(name) int name; scanf(\"%d\",&name);\n#define VINT(name,n) vector<int> name(n); for(int i = 0;i < n;i++) scanf(\"%d\",&name[i]);\n\nusing namespace std;\n\nint main(int argc, char const *argv[]){\n\tfor(int i = 1;i <= 9;i++){\n\t\tfor(int j = 1;j <= 9;j++){\n\t\t\tprintf(\"%dx%d=%d\\n\",i,j,i*j);\n\t\t}\n\t}\n\treturn 0;\n}",
    "translated_code": "#include <bits/stdc++.h>\n#define INT(name) int name; scanf(\"%d\",&name);\n#define VINT(name,n) vector<int> name(n); for(int i = 0;i < n;i++) scanf(\"%d\",&name[i]);\n\nusing namespace std;\n\n__global__ void print_multiplication_table(int *table, int n){\n\tint idx = threadIdx.x + blockIdx.x * blockDim.x;\n\tif(idx < n){\n\t\tfor(int i = 1;i <= 9;i++){\n\t\t\tprintf(\"%dx%d=%d\\n\",i,table[idx],i*table[idx]);\n\t\t}\n\t}\n}\n\nint main(int argc, char const *argv[]){\n\tint n;\n\tscanf(\"%d\",&n);\n\tVINT(table,n);\n\tprint_multiplication_table<<<(n+255)/256,256>>>(table,n);\n\tcudaDeviceSynchronize();\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_45.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_45",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_45.cu(20): error: no suitable conversion function from \"std::vector<int, std::allocator<int>>\" to \"int *\" exists\n\n1 error detected in the compilation of \"/tmp/tmpd9n9oeu2/program_45.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s092574612.cpp",
    "original_c": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define FOR(i,l,r) for(int i = (l);i < (r);i++)\n#define ALL(x) (x).begin(),(x).end()\ntemplate<typename T> bool chmax(T& a,const T& b){return a < b ? (a = b,true) : false;}\ntemplate<typename T> bool chmin(T& a,const T& b){return b < a ? (a = b,true) : false;}\ntypedef long long ll;\n\nint main()\n{\n\tfor(int i = 1;i <= 9;i++){\n\t\tfor(int j = 1;j <= 9;j++){\n\t\t\tprintf(\"%dx%d=%d\\n\",i,j,i * j);\n\t\t}\n\t}\n\n\treturn 0;\n}",
    "translated_code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define FOR(i,l,r) for(int i = (l);i < (r);i++)\n#define ALL(x) (x).begin(),(x).end()\ntemplate<typename T> bool chmax(T& a,const T& b){return a < b ? (a = b,true) : false;}\ntemplate<typename T> bool chmin(T& a,const T& b){return b < a ? (a = b,true) : false;}\ntypedef long long ll;\n\n__global__ void kernel(int *a, int *b)\n{\n\tint idx = threadIdx.x + blockIdx.x * blockDim.x;\n\tif(idx < 100)\n\t{\n\t\ta[idx] = idx * idx;\n\t\tb[idx] = idx * idx * idx;\n\t}\n}\n\nint main()\n{\n\tint *a, *b;\n\tcudaMalloc((void **)&a, 100 * sizeof(int));\n\tcudaMalloc((void **)&b, 100 * sizeof(int));\n\n\tkernel<<<1,100>>>(a, b);\n\n\tcudaDeviceSynchronize();\n\n\tfor(int i = 0;i < 100;i++)\n\t{\n\t\tprintf(\"%d^2=%d\\n\",i,a[i]);\n\t\tprintf(\"%d^3=%d\\n\",i,b[i]);\n\t}\n\n\tcudaFree(a);\n\tcudaFree(b);\n\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_46.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_46",
    "compile_stdout": "",
    "compile_stderr": "/usr/include/c++/11/bits/std_function.h:435:145: error: parameter packs not expanded with \u2018...\u2019:\n  435 |         function(_Functor&& __f)\n      |                                                                                                                                                 ^ \n/usr/include/c++/11/bits/std_function.h:435:145: note:         \u2018_ArgTypes\u2019\n/usr/include/c++/11/bits/std_function.h:530:146: error: parameter packs not expanded with \u2018...\u2019:\n  530 |         operator=(_Functor&& __f)\n      |                                                                                                                                                  ^ \n/usr/include/c++/11/bits/std_function.h:530:146: note:         \u2018_ArgTypes\u2019",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s096087960.cpp",
    "original_c": "#include<iostream>\nusing namespace std;\nint main()\n{\n\tint i,k;\n\tfor(i=1;i<10;i++)\n\t\tfor(k=1;k<10;k++)\n\t\t\t{\n\t\t\t\tcout<<i<<\"x\"<<k<<\"=\"<<i*k<<endl;\n\t\t\t}\n}\t",
    "translated_code": "#include<stdio.h>\nint main()\n{\n\tint i,k;\n\tfor(i=1;i<10;i++)\n\t\tfor(k=1;k<10;k++)\n\t\t\t{\n\t\t\t\tprintf(\"%d*%d=%d\\n\",i,k,i*k);\n\t\t\t}\n}",
    "source": "/tmp/tmpd9n9oeu2/program_47.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_47",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1*1=1\n1*2=2\n1*3=3\n1*4=4\n1*5=5\n1*6=6\n1*7=7\n1*8=8\n1*9=9\n2*1=2\n2*2=4\n2*3=6\n2*4=8\n2*5=10\n2*6=12\n2*7=14\n2*8=16\n2*9=18\n3*1=3\n3*2=6\n3*3=9\n3*4=12\n3*5=15\n3*6=18\n3*7=21\n3*8=24\n3*9=27\n4*1=4\n4*2=8\n4*3=12\n4*4=16\n4*5=20\n4*6=24\n4*7=28\n4*8=32\n4*9=36\n5*1=5\n5*2=10\n5*3=15\n5*4=20\n5*5=25\n5*6=30\n5*7=35\n5*8=40\n5*9=45\n6*1=6\n6*2=12\n6*3=18\n6*4=24\n6*5=30\n6*6=36\n6*7=42\n6*8=48\n6*9=54\n7*1=7\n7*2=14\n7*3=21\n7*4=28\n7*5=35\n7*6=42\n7*7=49\n7*8=56\n7*9=63\n8*1=8\n8*2=16\n8*3=24\n8*4=32\n8*5=40\n8*6=48\n8*7=56\n8*8=64\n8*9=72\n9*1=9\n9*2=18\n9*3=27\n9*4=36\n9*5=45\n9*6=54\n9*7=63\n9*8=72\n9*9=81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s097371956.cpp",
    "original_c": "#include <cstdio>\nconst int N = 9;\n\nint main(){\n    \n    for(int i = 1; i <= N; i++){\n        for(int j = 1; j <= N; j++){\n            printf(\"%dx%d=%d\\n\", i, j, i*j);\n        }\n    }\n\n    return 0;\n}",
    "translated_code": "#include <stdio.h>\n#define N 9\n\n__global__ void print_multiplication_table(int N) {\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    int j = blockIdx.y * blockDim.y + threadIdx.y;\n\n    if (i <= N && j <= N) {\n        printf(\"%dx%d=%d\\n\", i, j, i*j);\n    }\n}\n\nint main() {\n    int N = 9;\n    int threadsPerBlock = 16;\n    int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock;\n\n    print_multiplication_table<<<blocksPerGrid, threadsPerBlock>>>(N);\n\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_48.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_48",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_48.cu(4): error: expected a \")\"\n\n/tmp/tmpd9n9oeu2/program_48.cu(14): error: expected an identifier\n\n2 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_48.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s097651031.cpp",
    "original_c": "#include<iostream>\n \nusing namespace std;\nvoid a(string s[11]){\n\treturn ;\n}\nint main(){\n\tstring s[4];\n\ta(s);\n    for(int i=1;i<=9;i++){\n        for(int j=1;j<=9;j++){\n            cout<<i<<\"x\"<<j<<\"=\"<<i*j<<endl;\n        }\n    }\n    return 0;\n}",
    "translated_code": "#include<iostream>\n \nusing namespace std;\n__global__ void a(string s[11]){\n\treturn ;\n}\nint main(){\n\tstring s[4];\n\ta<<<1,1>>>(s);\n    for(int i=1;i<=9;i++){\n        for(int j=1;j<=9;j++){\n            cout<<i<<\"x\"<<j<<\"=\"<<i*j<<endl;\n        }\n    }\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_49.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_49",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1x1=1\n1x2=2\n1x3=3\n1x4=4\n1x5=5\n1x6=6\n1x7=7\n1x8=8\n1x9=9\n2x1=2\n2x2=4\n2x3=6\n2x4=8\n2x5=10\n2x6=12\n2x7=14\n2x8=16\n2x9=18\n3x1=3\n3x2=6\n3x3=9\n3x4=12\n3x5=15\n3x6=18\n3x7=21\n3x8=24\n3x9=27\n4x1=4\n4x2=8\n4x3=12\n4x4=16\n4x5=20\n4x6=24\n4x7=28\n4x8=32\n4x9=36\n5x1=5\n5x2=10\n5x3=15\n5x4=20\n5x5=25\n5x6=30\n5x7=35\n5x8=40\n5x9=45\n6x1=6\n6x2=12\n6x3=18\n6x4=24\n6x5=30\n6x6=36\n6x7=42\n6x8=48\n6x9=54\n7x1=7\n7x2=14\n7x3=21\n7x4=28\n7x5=35\n7x6=42\n7x7=49\n7x8=56\n7x9=63\n8x1=8\n8x2=16\n8x3=24\n8x4=32\n8x5=40\n8x6=48\n8x7=56\n8x8=64\n8x9=72\n9x1=9\n9x2=18\n9x3=27\n9x4=36\n9x5=45\n9x6=54\n9x7=63\n9x8=72\n9x9=81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s100511807.cpp",
    "original_c": "#include <iostream>\nint s,e;int main(){while((s+=(e=e%9+1)<2)<10)std::cout<<s<<'x'<<e<<'='<<s*e<<'\\n';0;}",
    "translated_code": "#include <stdio.h>\nint s,e;\n__global__ void kernel(int *s, int *e) {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx < 10) {\n        s[idx] = (e[idx] = e[idx] % 9 + 1) < 2 ? s[idx] : 0;\n        printf(\"%d x %d = %d\\n\", s[idx], e[idx], s[idx] * e[idx]);\n    }\n}\nint main() {\n    int s[10], e[10];\n    for (int i = 0; i < 10; i++) {\n        s[i] = 0;\n        e[i] = i;\n    }\n    int *d_s, *d_e;\n    cudaMalloc((void **)&d_s, 10 * sizeof(int));\n    cudaMalloc((void **)&d_e, 10 * sizeof(int));\n    cudaMemcpy(d_s, s, 10 * sizeof(int), cudaMemcpyHostToDevice);\n    cudaMemcpy(d_e, e, 10 * sizeof(int), cudaMemcpyHostToDevice);\n    kernel<<<1, 10>>>(d_s, d_e);\n    cudaMemcpy(s, d_s, 10 * sizeof(int), cudaMemcpyDeviceToHost);\n    cudaFree(d_s);\n    cudaFree(d_e);\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_50.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_50",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 9 = 0\n0 x 1 = 0",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s100548990.cpp",
    "original_c": "#include <iostream>\n\nusing namespace std;\n\nint main(){\n\tint m, n, q;\n\n\tfor(m=1; m<10; m++){\n\t\tfor(n=1; n<10; n++){\n\t\t\tq = m*n;\n\t\t\tcout << m << \"x\" << n << \"=\" << q << endl;\n\t\t}\n\t}\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void multiply(int *m, int *n, int *q) {\n\tint idx = threadIdx.x + blockIdx.x * blockDim.x;\n\tif (idx < 100) {\n\t\tq[idx] = m[idx] * n[idx];\n\t}\n}\n\nint main() {\n\tint m[100], n[100], q[100];\n\n\tfor(int i=0; i<100; i++) {\n\t\tm[i] = i+1;\n\t\tn[i] = i+1;\n\t}\n\n\tmultiply<<<1,100>>>(m, n, q);\n\n\tfor(int i=0; i<100; i++) {\n\t\tprintf(\"%d x %d = %d\\n\", m[i], n[i], q[i]);\n\t}\n\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_51.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_51",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 0\n2 x 2 = 0\n3 x 3 = 0\n4 x 4 = 0\n5 x 5 = 0\n6 x 6 = 0\n7 x 7 = 0\n8 x 8 = 0\n9 x 9 = 0\n10 x 10 = 0\n11 x 11 = 0\n12 x 12 = 0\n13 x 13 = -1956823040\n14 x 14 = 23765\n15 x 15 = 0\n16 x 16 = 0\n17 x 17 = 786432\n18 x 18 = 0\n19 x 19 = 2048\n20 x 20 = 0\n21 x 21 = 0\n22 x 22 = 0\n23 x 23 = 96\n24 x 24 = 0\n25 x 25 = 786432\n26 x 26 = 0\n27 x 27 = -1136546688\n28 x 28 = 29948\n29 x 29 = 640\n30 x 30 = 6\n31 x 31 = 88\n32 x 32 = 0\n33 x 33 = 656\n34 x 34 = 0\n35 x 35 = 41\n36 x 36 = 0\n37 x 37 = 2\n38 x 38 = 0\n39 x 39 = 14\n40 x 40 = -2147483648\n41 x 41 = 0\n42 x 42 = 0\n43 x 43 = 0\n44 x 44 = 0\n45 x 45 = 0\n46 x 46 = 0\n47 x 47 = 0\n48 x 48 = 0\n49 x 49 = 0\n50 x 50 = 0\n51 x 51 = 0\n52 x 52 = 0\n53 x 53 = 110\n54 x 54 = 91\n55 x 55 = 0\n56 x 56 = 0\n57 x 57 = 0\n58 x 58 = 7\n59 x 59 = -1136546688\n60 x 60 = 29948\n61 x 61 = 0\n62 x 62 = 0\n63 x 63 = 144\n64 x 64 = 0\n65 x 65 = 0\n66 x 66 = 0\n67 x 67 = 32\n68 x 68 = 0\n69 x 69 = 0\n70 x 70 = 9\n71 x 71 = 136\n72 x 72 = 0\n73 x 73 = 0\n74 x 74 = 2\n75 x 75 = 24\n76 x 76 = 0\n77 x 77 = -1956822256\n78 x 78 = 23765\n79 x 79 = -1\n80 x 80 = 0\n81 x 81 = 2\n82 x 82 = 0\n83 x 83 = 9\n84 x 84 = 50\n85 x 85 = 0\n86 x 86 = 0\n87 x 87 = 2\n88 x 88 = 48\n89 x 89 = 0\n90 x 90 = 0\n91 x 91 = 0\n92 x 92 = 0\n93 x 93 = 0\n94 x 94 = 0\n95 x 95 = 124\n96 x 96 = 119\n97 x 97 = 110\n98 x 98 = 91\n99 x 99 = -1956822064\n100 x 100 = 23765",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s106790035.cpp",
    "original_c": "#include<stdio.h>\n#define F(i) for(i=1;i<=9;i++)\nint main(){int i,j;F(i)F(j)printf(\"%dx%d=%d\\n\",i,j,i*j);}",
    "translated_code": "#include<stdio.h>\n#define F(i) for(i=1;i<=9;i++)\n__global__ void kernel(int *a, int *b){\nint i,j;\nF(i)F(j)a[i*9+j]=i*j;\n}\nint main(){\nint *a, *b;\nint i,j;\na=(int *)malloc(9*9*sizeof(int));\nb=(int *)malloc(9*9*sizeof(int));\nkernel<<<1,1>>>(a,b);\nF(i)F(j)printf(\"%dx%d=%d\\n\",i,j,a[i*9+j]);\nfree(a);\nfree(b);\nreturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_52.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_52",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1x1=0\n1x2=0\n1x3=0\n1x4=0\n1x5=0\n1x6=0\n1x7=0\n1x8=0\n1x9=0\n2x1=0\n2x2=0\n2x3=0\n2x4=0\n2x5=0\n2x6=0\n2x7=0\n2x8=0\n2x9=0\n3x1=0\n3x2=0\n3x3=0\n3x4=0\n3x5=0\n3x6=0\n3x7=0\n3x8=0\n3x9=0\n4x1=0\n4x2=0\n4x3=0\n4x4=0\n4x5=0\n4x6=0\n4x7=0\n4x8=0\n4x9=0\n5x1=0\n5x2=0\n5x3=0\n5x4=0\n5x5=0\n5x6=0\n5x7=0\n5x8=0\n5x9=0\n6x1=0\n6x2=0\n6x3=0\n6x4=0\n6x5=0\n6x6=0\n6x7=0\n6x8=0\n6x9=0\n7x1=0\n7x2=0\n7x3=0\n7x4=0\n7x5=0\n7x6=0\n7x7=0\n7x8=0\n7x9=0\n8x1=0\n8x2=0\n8x3=0\n8x4=0\n8x5=0\n8x6=0\n8x7=0\n8x8=0\n8x9=0\n9x1=337\n9x2=0\n9x3=0\n9x4=0\n9x5=0\n9x6=0\n9x7=0\n9x8=0\n9x9=0",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s107919637.cpp",
    "original_c": "#include<iostream>\nusing namespace std;\n\nint main()\n{\n    int a;\n    for(int i=1;i<10;i++){\n    for(int j=1;j<10;j++){\n    a=i*j;\n    cout<<i<<'x'<<j<<'='<<a<<'\\n';\n    }\n    }\n    return 0;\n}\n    ",
    "translated_code": "#include<stdio.h>\n\n__global__ void multiply(int *a, int *b, int *c) {\n    int i = threadIdx.x;\n    int j = threadIdx.y;\n    c[i*blockDim.y + j] = a[i] * b[j];\n}\n\nint main() {\n    int a[10][10];\n    int b[10][10];\n    int c[10][10];\n\n    for(int i=0;i<10;i++){\n        for(int j=0;j<10;j++){\n            a[i][j] = i+1;\n            b[i][j] = j+1;\n        }\n    }\n\n    int *d_a, *d_b, *d_c;\n    cudaMalloc((void **)&d_a, 10*10*sizeof(int));\n    cudaMalloc((void **)&d_b, 10*10*sizeof(int));\n    cudaMalloc((void **)&d_c, 10*10*sizeof(int));\n\n    cudaMemcpy(d_a, a, 10*10*sizeof(int), cudaMemcpyHostToDevice);\n    cudaMemcpy(d_b, b, 10*10*sizeof(int), cudaMemcpyHostToDevice);\n\n    multiply<<<10,10>>>(d_a, d_b, d_c);\n\n    cudaMemcpy(c, d_c, 10*10*sizeof(int), cudaMemcpyDeviceToHost);\n\n    for(int i=0;i<10;i++){\n        for(int j=0;j<10;j++){\n            printf(\"%d x %d = %d\\n\", i+1, j+1, c[i][j]);\n        }\n    }\n\n    cudaFree(d_a);\n    cudaFree(d_b);\n    cudaFree(d",
    "source": "/tmp/tmpd9n9oeu2/program_53.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_53",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_53.cu(41): error: identifier \"d\" is undefined\n\nAt end of source: error: expected a \")\"\n\nAt end of source: error: expected a \";\"\n\nAt end of source: error: expected a \"}\"\n\n4 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_53.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s108748030.cpp",
    "original_c": "\n\n#include <iostream>\n\nusing namespace std;\n\nint main(int argc, const char * argv[])\n{\n\n    for(int i=1;i<=9;i++){\n        for(int j=1;j<=9;j++){\n            cout << i << \"x\" << j << \"=\" << i*j<< endl;\n        }\n    }\n    \n    return 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void print_table(int start, int end) {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx >= start && idx <= end) {\n        for (int i = 1; i <= 9; i++) {\n            printf(\"%d x %d = %d\\n\", idx, i, idx * i);\n        }\n    }\n}\n\nint main() {\n    int start = 1;\n    int end = 9;\n    int threadsPerBlock = 256;\n    int blocksPerGrid = (end - start + 1 + threadsPerBlock - 1) / threadsPerBlock;\n    print_table<<<blocksPerGrid, threadsPerBlock>>>(start, end);\n    cudaDeviceSynchronize();\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_54.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_54",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n2 x 1 = 2\n3 x 1 = 3\n4 x 1 = 4\n5 x 1 = 5\n6 x 1 = 6\n7 x 1 = 7\n8 x 1 = 8\n9 x 1 = 9\n1 x 2 = 2\n2 x 2 = 4\n3 x 2 = 6\n4 x 2 = 8\n5 x 2 = 10\n6 x 2 = 12\n7 x 2 = 14\n8 x 2 = 16\n9 x 2 = 18\n1 x 3 = 3\n2 x 3 = 6\n3 x 3 = 9\n4 x 3 = 12\n5 x 3 = 15\n6 x 3 = 18\n7 x 3 = 21\n8 x 3 = 24\n9 x 3 = 27\n1 x 4 = 4\n2 x 4 = 8\n3 x 4 = 12\n4 x 4 = 16\n5 x 4 = 20\n6 x 4 = 24\n7 x 4 = 28\n8 x 4 = 32\n9 x 4 = 36\n1 x 5 = 5\n2 x 5 = 10\n3 x 5 = 15\n4 x 5 = 20\n5 x 5 = 25\n6 x 5 = 30\n7 x 5 = 35\n8 x 5 = 40\n9 x 5 = 45\n1 x 6 = 6\n2 x 6 = 12\n3 x 6 = 18\n4 x 6 = 24\n5 x 6 = 30\n6 x 6 = 36\n7 x 6 = 42\n8 x 6 = 48\n9 x 6 = 54\n1 x 7 = 7\n2 x 7 = 14\n3 x 7 = 21\n4 x 7 = 28\n5 x 7 = 35\n6 x 7 = 42\n7 x 7 = 49\n8 x 7 = 56\n9 x 7 = 63\n1 x 8 = 8\n2 x 8 = 16\n3 x 8 = 24\n4 x 8 = 32\n5 x 8 = 40\n6 x 8 = 48\n7 x 8 = 56\n8 x 8 = 64\n9 x 8 = 72\n1 x 9 = 9\n2 x 9 = 18\n3 x 9 = 27\n4 x 9 = 36\n5 x 9 = 45\n6 x 9 = 54\n7 x 9 = 63\n8 x 9 = 72\n9 x 9 = 81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s108801591.cpp",
    "original_c": "#include <iostream>\n\nint main()\n{\n\tfor (int i = 1; i < 10; ++i)\n\t\tfor (int j = 1; j < 10; ++j)\n\t\t\tstd::cout << i << \"x\" << j << \"=\" << i*j << std::endl;\n\treturn 0;\n}",
    "translated_code": "__global__ void print_table(int *table) {\n\tint i = blockIdx.x * blockDim.x + threadIdx.x;\n\tint j = blockIdx.y * blockDim.y + threadIdx.y;\n\tif (i < 10 && j < 10) {\n\t\tprintf(\"%d x %d = %d\\n\", i, j, i*j);\n\t}\n}\n\nint main() {\n\tint *table;\n\tcudaMalloc((void **)&table, 100 * sizeof(int));\n\tprint_table<<<dim3(10, 10), dim3(16, 16)>>>(table);\n\tcudaDeviceSynchronize();\n\tcudaFree(table);\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_55.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_55",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_55.cu(5): error: identifier \"printf\" is undefined\n\n1 error detected in the compilation of \"/tmp/tmpd9n9oeu2/program_55.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s109145798.cpp",
    "original_c": "#include <iostream>\n#include <stdio.h>\n\nint i = 1;\n\nint main(){\n\twhile(i <= 9 ){\n\t\tint r = 1;\n\t\twhile(r <= 9){\n\t\t\tint num = i * r;\n\t\t\tprintf(\"%dx%d=%d\\n\", i, r, num);\n\t\t\tr++;\n\t\t}\n\t\ti++;\n\t}\n\treturn 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void multiply(int *a, int *b, int *c, int n) {\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (i < n) {\n        c[i] = a[i] * b[i];\n    }\n}\n\nint main() {\n    int n = 10;\n    int *a, *b, *c;\n    a = (int *)malloc(n * sizeof(int));\n    b = (int *)malloc(n * sizeof(int));\n    c = (int *)malloc(n * sizeof(int));\n\n    // Initialize a and b arrays\n    for (int i = 0; i < n; i++) {\n        a[i] = i + 1;\n        b[i] = i + 1;\n    }\n\n    // Allocate memory on the GPU\n    int *d_a, *d_b, *d_c;\n    cudaMalloc((void **)&d_a, n * sizeof(int));\n    cudaMalloc((void **)&d_b, n * sizeof(int));\n    cudaMalloc((void **)&d_c, n * sizeof(int));\n\n    // Copy data from host to device\n    cudaMemcpy(d_a, a, n * sizeof(int), cudaMemcpyHostToDevice);\n    cudaMemcpy(d_b, b, n * sizeof(int), cudaMemcpyHostToDevice);\n\n    // Launch the kernel\n    multiply<<<1, n>>>(d_a, d_b, d_c, n);\n\n    // Copy data from device to host\n    cudaMemcpy(c, d_c, n * sizeof(int), cudaMemcpyDeviceToHost);\n\n    // Free memory\n    free(a);\n    free(b);\n    free(c);\n    cudaFree(d_a);\n    cudaFree(d_b);\n    cudaFree(d_c);\n\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_56.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_56",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s109285510.cpp",
    "original_c": "#include <iostream>\n\nint main(int argc, char *argv[]) {\n\tint m, n;\n\tfor (m = 1; m <= 9; ++m) {\n\t\tfor (n = 1; n <= 9; ++n) {\n\t\t\tstd::cout << m << 'x' << n << '=' << (m * n) << std::endl;\n\t\t}\n\t}\n\treturn 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void multiply(int *m, int *n, int *result) {\n\tint idx = threadIdx.x + blockIdx.x * blockDim.x;\n\tif (idx < 100) {\n\t\tresult[idx] = m[idx] * n[idx];\n\t}\n}\n\nint main(int argc, char *argv[]) {\n\tint m[100], n[100], result[100];\n\tfor (int i = 0; i < 100; i++) {\n\t\tm[i] = i + 1;\n\t\tn[i] = i + 1;\n\t}\n\n\tint *d_m, *d_n, *d_result;\n\tcudaMalloc((void **)&d_m, 100 * sizeof(int));\n\tcudaMalloc((void **)&d_n, 100 * sizeof(int));\n\tcudaMalloc((void **)&d_result, 100 * sizeof(int));\n\n\tcudaMemcpy(d_m, m, 100 * sizeof(int), cudaMemcpyHostToDevice);\n\tcudaMemcpy(d_n, n, 100 * sizeof(int), cudaMemcpyHostToDevice);\n\n\tmultiply<<<1, 100>>>(d_m, d_n, d_result);\n\n\tcudaMemcpy(result, d_result, 100 * sizeof(int), cudaMemcpyDeviceToHost);\n\n\tfor (int i = 0; i < 100; i++) {\n\t\tprintf(\"%d x %d = %d\\n\", m[i], n[i], result[i]);\n\t}\n\n\tcudaFree(d_m);\n\tcudaFree(d_n);\n\tcudaFree(d_result);\n\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_57.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_57",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n2 x 2 = 4\n3 x 3 = 9\n4 x 4 = 16\n5 x 5 = 25\n6 x 6 = 36\n7 x 7 = 49\n8 x 8 = 64\n9 x 9 = 81\n10 x 10 = 100\n11 x 11 = 121\n12 x 12 = 144\n13 x 13 = 169\n14 x 14 = 196\n15 x 15 = 225\n16 x 16 = 256\n17 x 17 = 289\n18 x 18 = 324\n19 x 19 = 361\n20 x 20 = 400\n21 x 21 = 441\n22 x 22 = 484\n23 x 23 = 529\n24 x 24 = 576\n25 x 25 = 625\n26 x 26 = 676\n27 x 27 = 729\n28 x 28 = 784\n29 x 29 = 841\n30 x 30 = 900\n31 x 31 = 961\n32 x 32 = 1024\n33 x 33 = 1089\n34 x 34 = 1156\n35 x 35 = 1225\n36 x 36 = 1296\n37 x 37 = 1369\n38 x 38 = 1444\n39 x 39 = 1521\n40 x 40 = 1600\n41 x 41 = 1681\n42 x 42 = 1764\n43 x 43 = 1849\n44 x 44 = 1936\n45 x 45 = 2025\n46 x 46 = 2116\n47 x 47 = 2209\n48 x 48 = 2304\n49 x 49 = 2401\n50 x 50 = 2500\n51 x 51 = 2601\n52 x 52 = 2704\n53 x 53 = 2809\n54 x 54 = 2916\n55 x 55 = 3025\n56 x 56 = 3136\n57 x 57 = 3249\n58 x 58 = 3364\n59 x 59 = 3481\n60 x 60 = 3600\n61 x 61 = 3721\n62 x 62 = 3844\n63 x 63 = 3969\n64 x 64 = 4096\n65 x 65 = 4225\n66 x 66 = 4356\n67 x 67 = 4489\n68 x 68 = 4624\n69 x 69 = 4761\n70 x 70 = 4900\n71 x 71 = 5041\n72 x 72 = 5184\n73 x 73 = 5329\n74 x 74 = 5476\n75 x 75 = 5625\n76 x 76 = 5776\n77 x 77 = 5929\n78 x 78 = 6084\n79 x 79 = 6241\n80 x 80 = 6400\n81 x 81 = 6561\n82 x 82 = 6724\n83 x 83 = 6889\n84 x 84 = 7056\n85 x 85 = 7225\n86 x 86 = 7396\n87 x 87 = 7569\n88 x 88 = 7744\n89 x 89 = 7921\n90 x 90 = 8100\n91 x 91 = 8281\n92 x 92 = 8464\n93 x 93 = 8649\n94 x 94 = 8836\n95 x 95 = 9025\n96 x 96 = 9216\n97 x 97 = 9409\n98 x 98 = 9604\n99 x 99 = 9801\n100 x 100 = 10000",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s111370023.cpp",
    "original_c": "#include <stdio.h>\n\nusing namespace std;\n\n\nint main(){\n\n\tfor(int i=1;i<=9;i++){\n\t\tfor(int k=1;k<=9;k++)printf(\"%dx%d=%d\\n\",i,k,i*k);\n\t}\n\n    return 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void print_table(int start, int end) {\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (i >= start && i <= end) {\n        for (int k = 1; k <= 9; k++) {\n            printf(\"%dx%d=%d\\n\", i, k, i * k);\n        }\n    }\n}\n\nint main() {\n    int start = 1;\n    int end = 9;\n    int blockSize = 256;\n    int numBlocks = (end - start + 1) / blockSize;\n\n    print_table<<<numBlocks, blockSize>>>(start, end);\n\n    cudaDeviceSynchronize();\n\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_58.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_58",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s115507051.cpp",
    "original_c": "#include <stdio.h>\n\nint main ( void )\n{\n  puts ( \"1x1=1\\n1x2=2\\n1x3=3\\n1x4=4\\n1x5=5\\n1x6=6\\n1x7=7\\n1x8=8\\n1x9=9\\n2x1=2\\n2x2=4\\n2x3=6\\n2x4=8\\n2x5=10\\n2x6=12\\n2x7=14\\n2x8=16\\n2x9=18\\n3x1=3\\n3x2=6\\n3x3=9\\n3x4=12\\n3x5=15\\n3x6=18\\n3x7=21\\n3x8=24\\n3x9=27\\n4x1=4\\n4x2=8\\n4x3=12\\n4x4=16\\n4x5=20\\n4x6=24\\n4x7=28\\n4x8=32\\n4x9=36\\n5x1=5\\n5x2=10\\n5x3=15\\n5x4=20\\n5x5=25\\n5x6=30\\n5x7=35\\n5x8=40\\n5x9=45\\n6x1=6\\n6x2=12\\n6x3=18\\n6x4=24\\n6x5=30\\n6x6=36\\n6x7=42\\n6x8=48\\n6x9=54\\n7x1=7\\n7x2=14\\n7x3=21\\n7x4=28\\n7x5=35\\n7x6=42\\n7x7=49\\n7x8=56\\n7x9=63\\n8x1=8\\n8x2=16\\n8x3=24\\n8x4=32\\n8x5=40\\n8x6=48\\n8x7=56\\n8x8=64\\n8x9=72\\n9x1=9\\n9x2=18\\n9x3=27\\n9x4=36\\n9x5=45\\n9x6=54\\n9x7=63\\n9x8=72\\n9x9=81\" );\n\n  return ( 0 );\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void print_table(int *table) {\n  int idx = threadIdx.x + blockIdx.x * blockDim.x;\n  if (idx < 100) {\n    printf(\"%dx%d=%d\\n\", idx / 10, idx % 10, table[idx]);\n  }\n}\n\nint main(void) {\n  int table[100];\n  for (int i = 0; i < 100; i++) {\n    table[i] = (i / 10) * (i % 10) * (i / 10) * (i % 10);\n  }\n\n  int *d_table;\n  cudaMalloc((void **)&d_table, 100 * sizeof(int));\n  cudaMemcpy(d_table, table, 100 * sizeof(int), cudaMemcpyHostToDevice);\n\n  print_table<<<1, 100>>>(d_table);\n\n  cudaDeviceSynchronize();\n  cudaFree(d_table);\n\n  return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_59.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_59",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "9x6=2916\n9x7=3969\n9x8=5184\n9x9=6561\n0x0=0\n0x1=0\n0x2=0\n0x3=0\n0x4=0\n0x5=0\n0x6=0\n0x7=0\n0x8=0\n0x9=0\n1x0=0\n1x1=1\n1x2=4\n1x3=9\n1x4=16\n1x5=25\n1x6=36\n1x7=49\n1x8=64\n1x9=81\n2x0=0\n2x1=4\n2x2=16\n2x3=36\n2x4=64\n2x5=100\n2x6=144\n2x7=196\n2x8=256\n2x9=324\n3x0=0\n3x1=9\n3x2=36\n3x3=81\n3x4=144\n3x5=225\n3x6=324\n3x7=441\n3x8=576\n3x9=729\n4x0=0\n4x1=16\n4x2=64\n4x3=144\n4x4=256\n4x5=400\n4x6=576\n4x7=784\n4x8=1024\n4x9=1296\n5x0=0\n5x1=25\n5x2=100\n5x3=225\n5x4=400\n5x5=625\n5x6=900\n5x7=1225\n5x8=1600\n5x9=2025\n6x0=0\n6x1=36\n6x2=144\n6x3=324\n6x4=576\n6x5=900\n6x6=1296\n6x7=1764\n6x8=2304\n6x9=2916\n7x0=0\n7x1=49\n7x2=196\n7x3=441\n7x4=784\n7x5=1225\n7x6=1764\n7x7=2401\n7x8=3136\n7x9=3969\n8x0=0\n8x1=64\n8x2=256\n8x3=576\n8x4=1024\n8x5=1600\n8x6=2304\n8x7=3136\n8x8=4096\n8x9=5184\n9x0=0\n9x1=81\n9x2=324\n9x3=729\n9x4=1296\n9x5=2025",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s115719540.cpp",
    "original_c": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cassert>\n#include <climits>\n#include <algorithm>\n#include <string>\n#include <sstream>\n#include <complex>\n#include <vector>\n#include <list>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <map>\n#include <set>\n#include <fstream>\n\nusing namespace std;\n#define TOSTRING(x) #x\n#define SZ(x) (int)(x).size()\n#define REP(i,n) for(int i=0;i<(n);i++)\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REPR(i,n) for(int i=(n)-1;i>=0;i--)\n#define ALL(s) (s).begin(), (s).end()\n#define so(V) sort(ALL(V))\n#define rev(V) reverse(ALL(V))\n#define uni(v) v.erase( unique(ALL(v)) , v.end());\n#define PAU \n\ntypedef long long unsigned int llu;\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<bool> vb;\ntypedef vector<vi> vvi;\ntypedef vector<vll> vvll;\ntypedef vector<vb> vvb;\nconst double EPS = 1e-9;\nconst int MOD = 1e9 + 7;\nconst int INF = (1 << 28);\nconst ll LINF = 1e18;\nconst double PI = acos(-1);\n\nint main() {\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\tFOR(i, 1, 10) {\n\t\tFOR(j, 1, 10) {\n\t\t\tcout << i << \"x\" << j << \"=\" << i * j << endl;\n\t\t}\n\t}\n\tPAU;\n\treturn 0;\n}\n\n",
    "translated_code": "#include <stdio.h>\n#include <stdlib.h>\n\n__global__ void kernel(int *a, int *b) {\n\tint idx = threadIdx.x + blockIdx.x * blockDim.x;\n\ta[idx] = b[idx];\n}\n\nint main() {\n\tint *a, *b;\n\tint n = 10;\n\ta = (int *)malloc(n * sizeof(int));\n\tb = (int *)malloc(n * sizeof(int));\n\n\tREP(i, n) {\n\t\ta[i] = i;\n\t\tb[i] = i * i;\n\t}\n\n\tkernel<<<1, n>>>(a, b);\n\n\tREP(i, n) {\n\t\tprintf(\"%d x %d = %d\\n\", a[i], a[i], b[i]);\n\t}\n\n\tfree(a);\n\tfree(b);\n\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_60.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_60",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_60.cu(15): error: identifier \"i\" is undefined\n\n/tmp/tmpd9n9oeu2/program_60.cu(15): error: identifier \"REP\" is undefined\n\n/tmp/tmpd9n9oeu2/program_60.cu(15): error: expected a \";\"\n\n/tmp/tmpd9n9oeu2/program_60.cu(20): warning #12-D: parsing restarts here after previous syntax error\n\n/tmp/tmpd9n9oeu2/program_60.cu(22): error: expected a \";\"\n\n/tmp/tmpd9n9oeu2/program_60.cu(26): warning #12-D: parsing restarts here after previous syntax error\n\n/tmp/tmpd9n9oeu2/program_60.cu(10): warning #550-D: variable \"a\" was set but never used\n\n4 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_60.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s115986407.cpp",
    "original_c": "#include <cstdio>\n\nint main()\n{\n\tfor (int i = 0; i < 9; ++i) {\n\t\tfor (int j = 0; j < 9; ++j) {\n\t\t\tint a = i + 1;\n\t\t\tint b = j + 1;\n\t\t\tprintf(\"%dx%d=%d\\n\", a, b, a * b);\n\t\t}\n\t}\n    return 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void kernel(int *a, int *b, int *c) {\n\tint i = blockIdx.x * blockDim.x + threadIdx.x;\n\tint j = blockIdx.y * blockDim.y + threadIdx.y;\n\tif (i < 9 && j < 9) {\n\t\tint a = i + 1;\n\t\tint b = j + 1;\n\t\tc[i * 9 + j] = a * b;\n\t}\n}\n\nint main() {\n\tint a[9][9];\n\tint b[9][9];\n\tint c[9][9];\n\n\tfor (int i = 0; i < 9; ++i) {\n\t\tfor (int j = 0; j < 9; ++j) {\n\t\t\ta[i][j] = i + 1;\n\t\t\tb[i][j] = j + 1;\n\t\t}\n\t}\n\n\tkernel<<<dim3(3, 3), dim3(3, 3)>>>(a, b, c);\n\n\tfor (int i = 0; i < 9; ++i) {\n\t\tfor (int j = 0; j < 9; ++j) {\n\t\t\tprintf(\"%dx%d=%d\\n\", a[i][j], b[i][j], c[i][j]);\n\t\t}\n\t}\n\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_61.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_61",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_61.cu(25): error: argument of type \"int (*)[9]\" is incompatible with parameter of type \"int *\"\n\n/tmp/tmpd9n9oeu2/program_61.cu(25): error: argument of type \"int (*)[9]\" is incompatible with parameter of type \"int *\"\n\n/tmp/tmpd9n9oeu2/program_61.cu(25): error: argument of type \"int (*)[9]\" is incompatible with parameter of type \"int *\"\n\n3 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_61.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s117390842.cpp",
    "original_c": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <iomanip>\nusing namespace std;\n\n#define FOR(i,a,b) for(long long int i=(a);i<(b);i++)\n#define REP(i,n) for(long long int i=0;i<(n);i++)\n\n#define PI 3.14159265358479\n\nint main(){\n\tREP(i, 9){\n\t\tREP(j, 9){\n\t\t\tcout << i + 1 << \"x\" << j + 1 << \"=\" << (i + 1)*(j + 1) << \"\\n\";\n\t\t}\n\t}\n\treturn 0;\n}",
    "translated_code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define FOR(i,a,b) for(int i=(a);i<(b);i++)\n#define REP(i,n) for(int i=0;i<(n);i++)\n\n#define PI 3.14159265358479\n\n__global__ void kernel(int *a, int *b){\n\tREP(i, 9){\n\t\tREP(j, 9){\n\t\t\tprintf(\"%d x %d = %d\\n\", i + 1, j + 1, (i + 1)*(j + 1));\n\t\t}\n\t}\n}\n\nint main(){\n\tint *a, *b;\n\tint size = sizeof(int) * 9 * 9;\n\ta = (int *)malloc(size);\n\tb = (int *)malloc(size);\n\tREP(i, 9){\n\t\tREP(j, 9){\n\t\t\ta[i * 9 + j] = i + 1;\n\t\t\tb[i * 9 + j] = j + 1;\n\t\t}\n\t}\n\tkernel<<<1, 1>>>(a, b);\n\tcudaDeviceSynchronize();\n\tfree(a);\n\tfree(b);\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_62.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_62",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n6 x 1 = 6\n6 x 2 = 12\n6 x 3 = 18\n6 x 4 = 24\n6 x 5 = 30\n6 x 6 = 36\n6 x 7 = 42\n6 x 8 = 48\n6 x 9 = 54\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n8 x 1 = 8\n8 x 2 = 16\n8 x 3 = 24\n8 x 4 = 32\n8 x 5 = 40\n8 x 6 = 48\n8 x 7 = 56\n8 x 8 = 64\n8 x 9 = 72\n9 x 1 = 9\n9 x 2 = 18\n9 x 3 = 27\n9 x 4 = 36\n9 x 5 = 45\n9 x 6 = 54\n9 x 7 = 63\n9 x 8 = 72\n9 x 9 = 81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s117559955.cpp",
    "original_c": "#include <bits/stdc++.h>\n\n#define REP(i, n) for(int i=0;i<(int)(n);i++)\n#define ALL(x) (x).begin(),(x).end()\nconst int INF = 1e9;\n\nusing namespace std;\nint main(){\n    REP(i, 9) REP(j, 9)\n        cout << i+1 << \"x\" << j+1 << \"=\" << (i+1) * (j+1) << endl;\n    return 0;\n}",
    "translated_code": "#include <stdio.h>\n\n#define REP(i, n) for(int i=0;i<(int)(n);i++)\n#define ALL(x) (x).begin(),(x).end()\nconst int INF = 1e9;\n\n__global__ void kernel(int *a, int n) {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx < n) {\n        printf(\"%d x %d = %d\\n\", idx+1, idx+1, (idx+1) * (idx+1));\n    }\n}\n\nint main() {\n    int n = 9;\n    int *a;\n    cudaMalloc((void **)&a, n * sizeof(int));\n    kernel<<<1, n>>>(a, n);\n    cudaDeviceSynchronize();\n    cudaFree(a);\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_63.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_63",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_63.cu(5): warning #177-D: variable \"INF\" was declared but never referenced",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n2 x 2 = 4\n3 x 3 = 9\n4 x 4 = 16\n5 x 5 = 25\n6 x 6 = 36\n7 x 7 = 49\n8 x 8 = 64\n9 x 9 = 81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s118075557.cpp",
    "original_c": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,n) for(i=0;i<n;i++)\n\nint main(){\n    int i,k;\n    rep(i,9){\n        rep(k,9){\n            printf(\"%dx%d=%d\\n\",i+1,k+1,(i+1)*(k+1));\n        }\n    }\n    return 0;\n}",
    "translated_code": "#include <stdio.h>\n\n#define rep(i,n) for(i=0;i<n;i++)\n\n__global__ void kernel(int *a, int *b, int n) {\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (i < n) {\n        printf(\"%dx%d=%d\\n\",i+1,i+1,(i+1)*(i+1));\n    }\n}\n\nint main() {\n    int i, k;\n    int *a, *b;\n    int n = 9;\n    cudaMalloc((void **)&a, n * sizeof(int));\n    cudaMalloc((void **)&b, n * sizeof(int));\n    rep(i, n) {\n        a[i] = i + 1;\n        b[i] = i + 1;\n    }\n    kernel<<<1, n>>>(a, b, n);\n    cudaDeviceSynchronize();\n    cudaFree(a);\n    cudaFree(b);\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_64.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_64",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_64.cu(13): warning #177-D: variable \"k\" was declared but never referenced",
    "compile_success": true,
    "run_stdout": "",
    "run_stderr": "",
    "run_success": false
  },
  {
    "id": "s123093127.cpp",
    "original_c": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\nusing namespace std;\nstatic const double EPS = 1e-5;\ntypedef long long ll;\n#define FOR(i,n) for(i=0;i<n;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n\nint main(){\n\trep(i,9){\n\t\trep(j,9){\n\t\t\tprintf(\"%dx%d=%d\\n\",i+1,j+1,(i+1)*(j+1));\n\t\t}\n\t}\n\treturn 0;\n}",
    "translated_code": "#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <climits>\n#include <cfloat>\n#include <map>\n#include <utility>\n#include <set>\n#include <iostream>\n#include <memory>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <sstream>\n#include <complex>\n#include <stack>\n#include <queue>\nusing namespace std;\nstatic const double EPS = 1e-5;\ntypedef long long ll;\n#define FOR(i,n) for(i=0;i<n;i++)\n#define rep(i,n) for(int i=0;i<n;i++)\n\n__global__ void kernel(int *a, int *b, int *c){\n\tint i = threadIdx.x;\n\ta[i] = i;\n\tb[i] = i;\n\tc[i] = i;\n}\n\nint main(){\n\tint *a, *b, *c;\n\tcudaMalloc((void **)&a, 9*sizeof(int));\n\tcudaMalloc((void **)&b, 9*sizeof(int));\n\tcudaMalloc((void **)&c, 9*sizeof(int));\n\tkernel<<<1,9>>>(a, b, c);\n\tcudaDeviceSynchronize();\n\trep(i,9){\n\t\tprintf(\"%dx%d=%d\\n\",i+1,i+1,(i+1)*(i+1));\n\t}\n\tcudaFree(a);\n\tcudaFree(b);\n\tcudaFree(c);\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_65.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_65",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_65.cu(20): warning #177-D: variable \"EPS\" was declared but never referenced\n\n/usr/include/c++/11/bits/std_function.h:435:145: error: parameter packs not expanded with \u2018...\u2019:\n  435 |         function(_Functor&& __f)\n      |                                                                                                                                                 ^ \n/usr/include/c++/11/bits/std_function.h:435:145: note:         \u2018_ArgTypes\u2019\n/usr/include/c++/11/bits/std_function.h:530:146: error: parameter packs not expanded with \u2018...\u2019:\n  530 |         operator=(_Functor&& __f)\n      |                                                                                                                                                  ^ \n/usr/include/c++/11/bits/std_function.h:530:146: note:         \u2018_ArgTypes\u2019",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s123348533.cpp",
    "original_c": "//----------------------------------------------------\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define fi first\n#define se second\n#define all(r) (r).begin(),(r).end()\n#define vmax_v(ary) *max_element(all(ary))\n#define vmin_v(ary) *min_element(all(ary))\n#define vmax_id(ary) distance((ary).begin(),max_element(all(ary)))\n#define vmin_id(ary) distance((ary).begin(),min_element(all(ary)))\n\nusing ll = int64_t;\nusing pll = pair<ll,ll>;\nusing vl = vector<ll>;\n\nconst ll INF=INT64_MAX;\nconst double EPS=1e-10;\nconst double PI=acos(-1.0);\n\nvoid init(){cin.tie(0);ios::sync_with_stdio(false);}\n//----------------------------------------------------\n\nint main(){\n    init();\n\n    for(int i=1;i<=9;i++){\n      for(int j=1;j<=9;j++){\n        cout << i << \"x\" << j << \"=\" << i*j << endl;\n      }\n    }\n\n    return 0;\n}",
    "translated_code": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define fi first\n#define se second\n#define all(r) (r).begin(),(r).end()\n#define vmax_v(ary) *max_element(all(ary))\n#define vmin_v(ary) *min_element(all(ary))\n#define vmax_id(ary) distance((ary).begin(),max_element(all(ary)))\n#define vmin_id(ary) distance((ary).begin(),min_element(all(ary)))\n\nusing ll = int64_t;\nusing pll = pair<ll,ll>;\nusing vl = vector<ll>;\n\nconst ll INF=INT64_MAX;\nconst double EPS=1e-10;\nconst double PI=acos(-1.0);\n\nvoid init(){cin.tie(0);ios::sync_with_stdio(false);}\n//----------------------------------------------------\n\n__global__ void kernel(int* arr){\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if(idx < 100){\n        arr[idx] = idx;\n    }\n}\n\nint main(){\n    init();\n\n    int* arr;\n    cudaMallocManaged(&arr, 100 * sizeof(int));\n\n    kernel<<<1,100>>>(arr);\n\n    for(int i=0;i<100;i++){\n        cout << arr[i] << endl;\n    }\n\n    cudaFree(arr);\n\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_66.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_66",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_66.cu(16): warning #177-D: variable \"INF\" was declared but never referenced\n\n/tmp/tmpd9n9oeu2/program_66.cu(17): warning #177-D: variable \"EPS\" was declared but never referenced\n\n/usr/include/c++/11/bits/std_function.h:435:145: error: parameter packs not expanded with \u2018...\u2019:\n  435 |         function(_Functor&& __f)\n      |                                                                                                                                                 ^ \n/usr/include/c++/11/bits/std_function.h:435:145: note:         \u2018_ArgTypes\u2019\n/usr/include/c++/11/bits/std_function.h:530:146: error: parameter packs not expanded with \u2018...\u2019:\n  530 |         operator=(_Functor&& __f)\n      |                                                                                                                                                  ^ \n/usr/include/c++/11/bits/std_function.h:530:146: note:         \u2018_ArgTypes\u2019",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s124300560.cpp",
    "original_c": "#include <stdio.h>\n\nint main(void){\n    for(int i=1;i<10;i++){\n        for(int j=1;j<10;j++){\n            printf(\"%dx%d=%d\\n\",i,j,i*j);\n        }\n    }\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void print_multiplication_table(int start, int end){\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    if(i >= start && i <= end){\n        for(int j=1;j<10;j++){\n            printf(\"%dx%d=%d\\n\",i,j,i*j);\n        }\n    }\n}\n\nint main(void){\n    int start = 1;\n    int end = 10;\n    int threads_per_block = 256;\n    int blocks_per_grid = (end - start + 1 + threads_per_block - 1) / threads_per_block;\n    print_multiplication_table<<<blocks_per_grid, threads_per_block>>>(start, end);\n    cudaDeviceSynchronize();\n}",
    "source": "/tmp/tmpd9n9oeu2/program_67.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_67",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1x1=1\n2x1=2\n3x1=3\n4x1=4\n5x1=5\n6x1=6\n7x1=7\n8x1=8\n9x1=9\n10x1=10\n1x2=2\n2x2=4\n3x2=6\n4x2=8\n5x2=10\n6x2=12\n7x2=14\n8x2=16\n9x2=18\n10x2=20\n1x3=3\n2x3=6\n3x3=9\n4x3=12\n5x3=15\n6x3=18\n7x3=21\n8x3=24\n9x3=27\n10x3=30\n1x4=4\n2x4=8\n3x4=12\n4x4=16\n5x4=20\n6x4=24\n7x4=28\n8x4=32\n9x4=36\n10x4=40\n1x5=5\n2x5=10\n3x5=15\n4x5=20\n5x5=25\n6x5=30\n7x5=35\n8x5=40\n9x5=45\n10x5=50\n1x6=6\n2x6=12\n3x6=18\n4x6=24\n5x6=30\n6x6=36\n7x6=42\n8x6=48\n9x6=54\n10x6=60\n1x7=7\n2x7=14\n3x7=21\n4x7=28\n5x7=35\n6x7=42\n7x7=49\n8x7=56\n9x7=63\n10x7=70\n1x8=8\n2x8=16\n3x8=24\n4x8=32\n5x8=40\n6x8=48\n7x8=56\n8x8=64\n9x8=72\n10x8=80\n1x9=9\n2x9=18\n3x9=27\n4x9=36\n5x9=45\n6x9=54\n7x9=63\n8x9=72\n9x9=81\n10x9=90",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s126255281.cpp",
    "original_c": "#include <iostream>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <string.h>\n#include <algorithm>\n\nusing namespace std;\n\nint main (void)\n{\n\tfor (int i = 1; i < 10; i++)\n\t{\n\t\tfor (int j = 1; j < 10; j++)\n\t\t{\n\t\t\tcout << i << 'x' << j << '=' << i * j\n << endl;\t\t}\n\t}\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void kernel(void)\n{\n\tint i = threadIdx.x;\n\tint j = threadIdx.y;\n\n\tprintf(\"%d x %d = %d\\n\", i, j, i * j);\n}\n\nint main(void)\n{\n\tkernel<<<1, 1>>>();\n\tcudaDeviceSynchronize();\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_68.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_68",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "0 x 0 = 0",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s132087713.cpp",
    "original_c": "#include <iostream>\nint s,e;int main(){while(s*e<81)s+=(e=e%9+1)<2,std::cout<<s<<'x'<<e<<'='<<s*e<<'\\n';return 0;}",
    "translated_code": "#include <stdio.h>\nint s,e;\n__global__ void kernel(int *s, int *e) {\n    while(s*e<81)s+=(e=e%9+1)<2;\n}\nint main() {\n    int s, e;\n    int *d_s, *d_e;\n    cudaMalloc((void **)&d_s, sizeof(int));\n    cudaMalloc((void **)&d_e, sizeof(int));\n    cudaMemcpy(d_s, &s, sizeof(int), cudaMemcpyHostToDevice);\n    cudaMemcpy(d_e, &e, sizeof(int), cudaMemcpyHostToDevice);\n    kernel<<<1,1>>>(d_s, d_e);\n    cudaMemcpy(&s, d_s, sizeof(int), cudaMemcpyDeviceToHost);\n    cudaMemcpy(&e, d_e, sizeof(int), cudaMemcpyDeviceToHost);\n    printf(\"%d x %d = %d\\n\", s, e, s*e);\n    cudaFree(d_s);\n    cudaFree(d_e);\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_69.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_69",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_69.cu(4): error: expression must have arithmetic or unscoped enum type\n\n/tmp/tmpd9n9oeu2/program_69.cu(4): error: expression must have arithmetic or unscoped enum type\n\n/tmp/tmpd9n9oeu2/program_69.cu(4): error: expression must have integral or unscoped enum type\n\n/tmp/tmpd9n9oeu2/program_69.cu(4): error: operand types are incompatible (\"int *\" and \"int\")\n\n4 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_69.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s134883468.cpp",
    "original_c": "#include<iostream>\nusing namespace std;\n\nint main(){\n\tfor(int index = 1; index <= 9 ; index++){\n\t\tfor(int jndex = 1 ; jndex <= 9 ; jndex++){\n\t\t\tcout<<index<<\"x\"<<jndex<<\"=\"<<index*jndex<<endl;\n\t\t}\n\t}\n\t\n} ",
    "translated_code": "#include<iostream>\nusing namespace std;\n\n__global__ void printTable(int *table){\n\tint index = blockIdx.x * blockDim.x + threadIdx.x;\n\tif(index < 10){\n\t\tfor(int jndex = 1 ; jndex <= 9 ; jndex++){\n\t\t\tprintf(\"%d x %d = %d\\n\", index, jndex, index*jndex);\n\t\t}\n\t}\n}\n\nint main(){\n\tint *table;\n\tcudaMalloc((void **)&table, sizeof(int)*10*10);\n\tprintTable<<<1,10>>>(table);\n\tcudaDeviceSynchronize();\n\tcudaFree(table);\n}",
    "source": "/tmp/tmpd9n9oeu2/program_70.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_70",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "0 x 1 = 0\n1 x 1 = 1\n2 x 1 = 2\n3 x 1 = 3\n4 x 1 = 4\n5 x 1 = 5\n6 x 1 = 6\n7 x 1 = 7\n8 x 1 = 8\n9 x 1 = 9\n0 x 2 = 0\n1 x 2 = 2\n2 x 2 = 4\n3 x 2 = 6\n4 x 2 = 8\n5 x 2 = 10\n6 x 2 = 12\n7 x 2 = 14\n8 x 2 = 16\n9 x 2 = 18\n0 x 3 = 0\n1 x 3 = 3\n2 x 3 = 6\n3 x 3 = 9\n4 x 3 = 12\n5 x 3 = 15\n6 x 3 = 18\n7 x 3 = 21\n8 x 3 = 24\n9 x 3 = 27\n0 x 4 = 0\n1 x 4 = 4\n2 x 4 = 8\n3 x 4 = 12\n4 x 4 = 16\n5 x 4 = 20\n6 x 4 = 24\n7 x 4 = 28\n8 x 4 = 32\n9 x 4 = 36\n0 x 5 = 0\n1 x 5 = 5\n2 x 5 = 10\n3 x 5 = 15\n4 x 5 = 20\n5 x 5 = 25\n6 x 5 = 30\n7 x 5 = 35\n8 x 5 = 40\n9 x 5 = 45\n0 x 6 = 0\n1 x 6 = 6\n2 x 6 = 12\n3 x 6 = 18\n4 x 6 = 24\n5 x 6 = 30\n6 x 6 = 36\n7 x 6 = 42\n8 x 6 = 48\n9 x 6 = 54\n0 x 7 = 0\n1 x 7 = 7\n2 x 7 = 14\n3 x 7 = 21\n4 x 7 = 28\n5 x 7 = 35\n6 x 7 = 42\n7 x 7 = 49\n8 x 7 = 56\n9 x 7 = 63\n0 x 8 = 0\n1 x 8 = 8\n2 x 8 = 16\n3 x 8 = 24\n4 x 8 = 32\n5 x 8 = 40\n6 x 8 = 48\n7 x 8 = 56\n8 x 8 = 64\n9 x 8 = 72\n0 x 9 = 0\n1 x 9 = 9\n2 x 9 = 18\n3 x 9 = 27\n4 x 9 = 36\n5 x 9 = 45\n6 x 9 = 54\n7 x 9 = 63\n8 x 9 = 72\n9 x 9 = 81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s135376322.cpp",
    "original_c": "#include<iostream>\n\nusing namespace std;\n\nint main() {\n\tint a = 0;\n\tint b = 0;\n\tint kake;\n\n\tfor (int i=1; i<10; i++) {\n\t\tfor (int j=1; j<10; j++) {\n\t\t\tkake = i * j;\n\t\t\tcout << i << \"x\" << j << \"=\" << kake << endl;\n\t\t}\n\t}\n\treturn 0;\n}",
    "translated_code": "#include<iostream>\n\nusing namespace std;\n\n__global__ void kernel(int *a, int *b) {\n\tint i = blockIdx.x * blockDim.x + threadIdx.x;\n\tint j = blockIdx.y * blockDim.y + threadIdx.y;\n\tint kake = i * j;\n\ta[i] = kake;\n\tb[j] = kake;\n}\n\nint main() {\n\tint a[10][10];\n\tint b[10][10];\n\n\tdim3 threadsPerBlock(16, 16);\n\tdim3 numBlocks((10+threadsPerBlock.x-1)/threadsPerBlock.x, (10+threadsPerBlock.y-1)/threadsPerBlock.y);\n\n\tkernel<<<numBlocks, threadsPerBlock>>>(a, b);\n\n\tfor (int i=0; i<10; i++) {\n\t\tfor (int j=0; j<10; j++) {\n\t\t\tcout << a[i][j] << \"x\" << b[j][i] << \"=\" << a[i][j] * b[j][i] << endl;\n\t\t}\n\t}\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_71.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_71",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_71.cu(20): error: argument of type \"int (*)[10]\" is incompatible with parameter of type \"int *\"\n\n/tmp/tmpd9n9oeu2/program_71.cu(20): error: argument of type \"int (*)[10]\" is incompatible with parameter of type \"int *\"\n\n2 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_71.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s137903426.cpp",
    "original_c": "#include <iostream>\nusing namespace std;\nint main(void){\n    int x,y,z;\n    z=0;\n    x=0;\n    while(1){\n        x=x+1;\n        while(1){\n            z=z+1;\n            y=x*z;\n            cout<<x<<\"x\"<<z<<\"=\"<<y<<endl;\n            if(z>=9){\n                break;\n            }\n        }\n        z=0;\n        if(x>=9){\n            break;\n        }\n    }\n    \n}\n\n",
    "translated_code": "#include <stdio.h>\n\n__global__ void kernel(int *x, int *y, int *z) {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx < 10) {\n        for (int i = 0; i < 10; i++) {\n            *x = *x + 1;\n            *y = *x * *z;\n            printf(\"%d x %d = %d\\n\", *x, *z, *y);\n            *z = *z + 1;\n            if (*z >= 9) {\n                break;\n            }\n        }\n        *z = 0;\n    }\n}\n\nint main() {\n    int x, y, z;\n    x = 0;\n    y = 0;\n    z = 0;\n    int *d_x, *d_y, *d_z;\n    cudaMalloc((void **)&d_x, sizeof(int));\n    cudaMalloc((void **)&d_y, sizeof(int));\n    cudaMalloc((void **)&d_z, sizeof(int));\n    cudaMemcpy(d_x, &x, sizeof(int), cudaMemcpyHostToDevice);\n    cudaMemcpy(d_y, &y, sizeof(int), cudaMemcpyHostToDevice);\n    cudaMemcpy(d_z, &z, sizeof(int), cudaMemcpyHostToDevice);\n    kernel<<<1, 10>>>(d_x, d_y, d_z);\n    cudaMemcpy(&x, d_x, sizeof(int), cudaMemcpyDeviceToHost);\n    cudaMemcpy(&y, d_y, sizeof(int), cudaMemcpyDeviceToHost);\n    cudaMemcpy(&z, d_z, sizeof(int), cudaMemcpyDeviceToHost);\n    cudaFree(d_x);\n    cudaFree(d_y);\n    cudaFree(d_z);\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_72.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_72",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 0 = 0\n1 x 0 = 0\n1 x 0 = 0\n1 x 0 = 0\n1 x 0 = 0\n1 x 0 = 0\n1 x 0 = 0\n1 x 0 = 0\n1 x 0 = 0\n1 x 0 = 0\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s138393955.cpp",
    "original_c": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n\n    for (int i = 0; i < 9; ++i) {\n        for (int j = 0; j < 9; ++j) {\n            int n1 = i + 1;\n            int n2 = j + 1;\n            cout << to_string(n1) + \"x\" + to_string(n2) + \"=\" + to_string(n1 * n2) << endl;\n\n        }\n    }\n\n    return 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void print_table(int n) {\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    int j = blockIdx.y * blockDim.y + threadIdx.y;\n\n    if (i < n && j < n) {\n        int n1 = i + 1;\n        int n2 = j + 1;\n        printf(\"%d x %d = %d\\n\", n1, n2, n1 * n2);\n    }\n}\n\nint main() {\n    int n = 9;\n    int threadsPerBlock = 16;\n    int blocksPerGrid = (n + threadsPerBlock - 1) / threadsPerBlock;\n\n    print_table<<<blocksPerGrid, threadsPerBlock>>>(n);\n\n    cudaDeviceSynchronize();\n\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_73.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_73",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n2 x 1 = 2\n3 x 1 = 3\n4 x 1 = 4\n5 x 1 = 5\n6 x 1 = 6\n7 x 1 = 7\n8 x 1 = 8\n9 x 1 = 9",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s138999449.cpp",
    "original_c": "#include<stdio.h>\nint main(void)\n{\n\tint a,b,c,x;\n\tx='x';\n\tfor(a=1;a<=9;a++){\n\t\tfor(b=1;b<=9;b++){\n\t\t\tc=a*b;\n\tprintf(\"%dx%d=%d\\n\",a,b,c);\n\t\t\t}\n\t\t}\n\treturn 0;\n}\n",
    "translated_code": "#include<stdio.h>\n__global__ void multiply(int *a, int *b, int *c)\n{\n\tint x = threadIdx.x;\n\tint y = threadIdx.y;\n\tint z = threadIdx.z;\n\tint a_val = a[x];\n\tint b_val = b[y];\n\tint c_val = a_val * b_val;\n\tc[z] = c_val;\n}\n\nint main(void)\n{\n\tint a[9][9] = {0};\n\tint b[9][9] = {0};\n\tint c[9][9] = {0};\n\tint *d_a, *d_b, *d_c;\n\tint size = sizeof(a)/sizeof(a[0]);\n\tcudaMalloc((void **)&d_a, size);\n\tcudaMalloc((void **)&d_b, size);\n\tcudaMalloc((void **)&d_c, size);\n\tcudaMemcpy(d_a, a, size, cudaMemcpyHostToDevice);\n\tcudaMemcpy(d_b, b, size, cudaMemcpyHostToDevice);\n\tmultiply<<<1, size>>>(d_a, d_b, d_c);\n\tcudaMemcpy(c, d_c, size, cudaMemcpyDeviceToHost);\n\tfor(int i=0;i<9;i++){\n\t\tfor(int j=0;j<9;j++){\n\t\t\tprintf(\"%dx%d=%d\\n\",a[i],b[j],c[i][j]);\n\t\t}\n\t}\n\tcudaFree(d_a);\n\tcudaFree(d_b);\n\tcudaFree(d_c);\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_74.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_74",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_74.cu: In function \u2018int main()\u2019:\n/tmp/tmpd9n9oeu2/program_74.cu:29:29: warning: format \u2018%d\u2019 expects argument of type \u2018int\u2019, but argument 2 has type \u2018int*\u2019 [-Wformat=]\n   29 |                         printf(\"%dx%d=%d\\n\",a[i],b[j],c[i][j]);\n      |                             ^~~~~~~~~~~~  ~~~~\n      |                                              |\n      |                                              int*\n/tmp/tmpd9n9oeu2/program_74.cu:29:29: warning: format \u2018%d\u2019 expects argument of type \u2018int\u2019, but argument 3 has type \u2018int*\u2019 [-Wformat=]\n   29 |                         printf(\"%dx%d=%d\\n\",a[i],b[j],c[i][j]);\n      |                             ^~~~~~~~~~~~        ~~~~\n      |                                                    |\n      |                                                    int*",
    "compile_success": true,
    "run_stdout": "-2046696032x-2046695696=0\n-2046696032x-2046695660=0\n-2046696032x-2046695624=0\n-2046696032x-2046695588=0\n-2046696032x-2046695552=0\n-2046696032x-2046695516=0\n-2046696032x-2046695480=0\n-2046696032x-2046695444=0\n-2046696032x-2046695408=0\n-2046695996x-2046695696=0\n-2046695996x-2046695660=0\n-2046695996x-2046695624=0\n-2046695996x-2046695588=0\n-2046695996x-2046695552=0\n-2046695996x-2046695516=0\n-2046695996x-2046695480=0\n-2046695996x-2046695444=0\n-2046695996x-2046695408=0\n-2046695960x-2046695696=0\n-2046695960x-2046695660=0\n-2046695960x-2046695624=0\n-2046695960x-2046695588=0\n-2046695960x-2046695552=0\n-2046695960x-2046695516=0\n-2046695960x-2046695480=0\n-2046695960x-2046695444=0\n-2046695960x-2046695408=0\n-2046695924x-2046695696=0\n-2046695924x-2046695660=0\n-2046695924x-2046695624=0\n-2046695924x-2046695588=0\n-2046695924x-2046695552=0\n-2046695924x-2046695516=0\n-2046695924x-2046695480=0\n-2046695924x-2046695444=0\n-2046695924x-2046695408=0\n-2046695888x-2046695696=0\n-2046695888x-2046695660=0\n-2046695888x-2046695624=0\n-2046695888x-2046695588=0\n-2046695888x-2046695552=0\n-2046695888x-2046695516=0\n-2046695888x-2046695480=0\n-2046695888x-2046695444=0\n-2046695888x-2046695408=0\n-2046695852x-2046695696=0\n-2046695852x-2046695660=0\n-2046695852x-2046695624=0\n-2046695852x-2046695588=0\n-2046695852x-2046695552=0\n-2046695852x-2046695516=0\n-2046695852x-2046695480=0\n-2046695852x-2046695444=0\n-2046695852x-2046695408=0\n-2046695816x-2046695696=0\n-2046695816x-2046695660=0\n-2046695816x-2046695624=0\n-2046695816x-2046695588=0\n-2046695816x-2046695552=0\n-2046695816x-2046695516=0\n-2046695816x-2046695480=0\n-2046695816x-2046695444=0\n-2046695816x-2046695408=0\n-2046695780x-2046695696=0\n-2046695780x-2046695660=0\n-2046695780x-2046695624=0\n-2046695780x-2046695588=0\n-2046695780x-2046695552=0\n-2046695780x-2046695516=0\n-2046695780x-2046695480=0\n-2046695780x-2046695444=0\n-2046695780x-2046695408=0\n-2046695744x-2046695696=0\n-2046695744x-2046695660=0\n-2046695744x-2046695624=0\n-2046695744x-2046695588=0\n-2046695744x-2046695552=0\n-2046695744x-2046695516=0\n-2046695744x-2046695480=0\n-2046695744x-2046695444=0\n-2046695744x-2046695408=0",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s141683029.cpp",
    "original_c": "#include<iostream>\nusing namespace std;\n\nint main(){\n\t\n\tint a,b,c;\n\t\n\tfor (a=1; a<10; a++){\n\t\t\n\t\tfor (b=1; b<10; b++){\n\t\t\t\n\t\t\tc=a*b;\n\t\t\tcout << a <<\"x\"<< b <<\"=\"<< c <<\"\\n\";\n\t\t\t\n\t\t}\n\t\n\t}\n\t\n\treturn 0;\n\t\n}",
    "translated_code": "#include<stdio.h>\n\n__global__ void multiply(int *a, int *b, int *c, int n) {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx < n) {\n        c[idx] = a[idx] * b[idx];\n    }\n}\n\nint main() {\n    int a[10], b[10], c[10];\n    int n = 10;\n\n    for (int i = 0; i < n; i++) {\n        a[i] = i + 1;\n        b[i] = i + 1;\n    }\n\n    int *d_a, *d_b, *d_c;\n    cudaMalloc((void **)&d_a, n * sizeof(int));\n    cudaMalloc((void **)&d_b, n * sizeof(int));\n    cudaMalloc((void **)&d_c, n * sizeof(int));\n\n    cudaMemcpy(d_a, a, n * sizeof(int), cudaMemcpyHostToDevice);\n    cudaMemcpy(d_b, b, n * sizeof(int), cudaMemcpyHostToDevice);\n\n    multiply<<<1, n>>>(d_a, d_b, d_c, n);\n\n    cudaMemcpy(c, d_c, n * sizeof(int), cudaMemcpyDeviceToHost);\n\n    for (int i = 0; i < n; i++) {\n        printf(\"%d x %d = %d\\n\", a[i], b[i], c[i]);\n    }\n\n    cudaFree(d_a);\n    cudaFree(d_b);\n    cudaFree(d_c);\n\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_75.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_75",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n2 x 2 = 4\n3 x 3 = 9\n4 x 4 = 16\n5 x 5 = 25\n6 x 6 = 36\n7 x 7 = 49\n8 x 8 = 64\n9 x 9 = 81\n10 x 10 = 100",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s141854533.cpp",
    "original_c": "#include<iostream>\nusing namespace std;\n\nint main(){\n    int sum;\n    \n    for(int i=1; i<10; i++){\n        for(int j=1; j<10; j++){\n            sum = i * j;\n            cout << i << \"x\" << j << \"=\" << sum << endl;\n        }\n    }\n\n    return 0;\n}",
    "translated_code": "#include<iostream>\nusing namespace std;\n\n__global__ void multiply(int *a, int *b, int *c, int n) {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx < n) {\n        c[idx] = a[idx] * b[idx];\n    }\n}\n\nint main() {\n    int n = 10;\n    int *a, *b, *c;\n    a = (int *)malloc(n * sizeof(int));\n    b = (int *)malloc(n * sizeof(int));\n    c = (int *)malloc(n * sizeof(int));\n\n    // Initialize a and b arrays\n    for (int i = 0; i < n; i++) {\n        a[i] = i + 1;\n        b[i] = i + 1;\n    }\n\n    // Allocate memory on the GPU\n    int *d_a, *d_b, *d_c;\n    cudaMalloc((void **)&d_a, n * sizeof(int));\n    cudaMalloc((void **)&d_b, n * sizeof(int));\n    cudaMalloc((void **)&d_c, n * sizeof(int));\n\n    // Copy data from host to device\n    cudaMemcpy(d_a, a, n * sizeof(int), cudaMemcpyHostToDevice);\n    cudaMemcpy(d_b, b, n * sizeof(int), cudaMemcpyHostToDevice);\n\n    // Launch the kernel\n    multiply<<<1, n>>>(d_a, d_b, d_c, n);\n\n    // Copy data from device to host\n    cudaMemcpy(c, d_c, n * sizeof(int), cudaMemcpyDeviceToHost);\n\n    // Free memory\n    cudaFree(d_a);\n    cudaFree(d_b);\n    cudaFree(d_c);\n\n    // Print the result\n    for (int i = 0; i < n; i++) {\n        cout << a[i",
    "source": "/tmp/tmpd9n9oeu2/program_76.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_76",
    "compile_stdout": "",
    "compile_stderr": "At end of source: error: expected a \"]\"\n\nAt end of source: error: expected a \";\"\n\nAt end of source: error: expected a \"}\"\n\nAt end of source: error: expected a \"}\"\n\n4 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_76.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s142340575.cpp",
    "original_c": "#include<cstdio>\nint main(){\n    for(int i=0;i<9;i++)\n        for(int j=0;j<9;j++)\n            printf(\"%dx%d=%d\\n\",i+1,j+1,(i+1)*(j+1));\n}",
    "translated_code": "#include<stdio.h>\n__global__ void kernel(int *a, int *b){\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    int j = blockIdx.y * blockDim.y + threadIdx.y;\n    if(i<9 && j<9){\n        printf(\"%dx%d=%d\\n\",i+1,j+1,(i+1)*(j+1));\n    }\n}\n\nint main(){\n    int *a, *b;\n    cudaMalloc((void **)&a, sizeof(int));\n    cudaMalloc((void **)&b, sizeof(int));\n    kernel<<<dim3(9,9), dim3(1,1)>>>(a, b);\n    cudaDeviceSynchronize();\n    cudaFree(a);\n    cudaFree(b);\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_77.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_77",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1x5=5\n4x5=20\n5x2=10\n8x2=16\n2x1=2\n5x1=5\n6x7=42\n7x3=21\n2x5=10\n9x7=63\n3x2=6\n3x6=18\n1x4=4\n8x4=32\n6x2=12\n6x6=36\n4x7=28\n9x4=36\n7x5=35\n3x1=3\n3x5=15\n1x6=6\n5x5=25\n4x2=8\n8x8=64\n7x7=49\n7x2=14\n2x9=18\n9x9=81\n1x1=1\n2x3=6\n8x3=24\n4x1=4\n5x3=15\n9x2=18\n5x7=35\n8x1=8\n4x6=24\n2x2=4\n6x1=6\n6x3=18\n3x8=24\n8x5=40\n6x8=48\n1x8=8\n2x6=12\n4x4=16\n9x8=72\n8x7=56\n7x4=28\n2x4=8\n6x5=30\n9x6=54\n3x3=9\n9x5=45\n3x7=21\n7x6=42\n7x8=56\n5x9=45\n9x1=9\n9x3=27\n8x9=72\n3x9=27\n1x3=3\n4x8=32\n4x3=12\n7x1=7\n5x4=20\n1x2=2\n2x8=16\n1x7=7\n5x6=30\n3x4=12\n6x9=54\n5x8=40\n8x6=48\n6x4=24\n4x9=36\n1x9=9\n2x7=14\n7x9=63",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s142451840.cpp",
    "original_c": "#include<stdio.h>\nint main(){\n\tint x=0,y=0,i,j;\n\tfor(i=0; i<9; i++){\n\ty=0;\n\t++x;\n\tfor(j=0; j<9; j++){\n\t++y;\n\tprintf(\"%dx%d=%d\\n\",x,y,x*y);\n\t};\n\t};\n}",
    "translated_code": "#include<stdio.h>\n__global__ void kernel(int *x, int *y){\n\tint i, j;\n\tfor(i=0; i<9; i++){\n\ty[i]=0;\n\t++x[0];\n\tfor(j=0; j<9; j++){\n\t++y[i];\n\tprintf(\"%dx%d=%d\\n\",x[0],y[i],x[0]*y[i]);\n\t};\n\t};\n}\n\nint main(){\n\tint x=0,y=0,i,j;\n\tint *x_d, *y_d;\n\tcudaMalloc((void **)&x_d, sizeof(int));\n\tcudaMalloc((void **)&y_d, sizeof(int));\n\tcudaMemcpy(x_d, &x, sizeof(int), cudaMemcpyHostToDevice);\n\tcudaMemcpy(y_d, &y, sizeof(int), cudaMemcpyHostToDevice);\n\tkernel<<<1,1>>>(x_d, y_d);\n\tcudaMemcpy(&x, x_d, sizeof(int), cudaMemcpyDeviceToHost);\n\tcudaMemcpy(&y, y_d, sizeof(int), cudaMemcpyDeviceToHost);\n\tcudaFree(x_d);\n\tcudaFree(y_d);\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_78.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_78",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_78.cu(15): warning #177-D: variable \"i\" was declared but never referenced\n\n/tmp/tmpd9n9oeu2/program_78.cu(15): warning #177-D: variable \"j\" was declared but never referenced",
    "compile_success": true,
    "run_stdout": "1x1=1\n1x2=2\n1x3=3\n1x4=4\n1x5=5\n1x6=6\n1x7=7\n1x8=8\n1x9=9\n2x1=2\n2x2=4\n2x3=6\n2x4=8\n2x5=10\n2x6=12\n2x7=14\n2x8=16\n2x9=18\n3x1=3\n3x2=6\n3x3=9\n3x4=12\n3x5=15\n3x6=18\n3x7=21\n3x8=24\n3x9=27\n4x1=4\n4x2=8\n4x3=12\n4x4=16\n4x5=20\n4x6=24\n4x7=28\n4x8=32\n4x9=36\n5x1=5\n5x2=10\n5x3=15\n5x4=20\n5x5=25\n5x6=30\n5x7=35\n5x8=40\n5x9=45\n6x1=6\n6x2=12\n6x3=18\n6x4=24\n6x5=30\n6x6=36\n6x7=42\n6x8=48\n6x9=54\n7x1=7\n7x2=14\n7x3=21\n7x4=28\n7x5=35\n7x6=42\n7x7=49\n7x8=56\n7x9=63\n8x1=8\n8x2=16\n8x3=24\n8x4=32\n8x5=40\n8x6=48\n8x7=56\n8x8=64\n8x9=72\n9x1=9\n9x2=18\n9x3=27\n9x4=36\n9x5=45\n9x6=54\n9x7=63\n9x8=72\n9x9=81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s145254814.cpp",
    "original_c": "#include <stdio.h>\n\nint main(int argc, char const *argv[])\n{\n\tint i, j;\n\tfor(i=1;i<10;i++) {\n\t\tfor(j=1;j<10;j++) {\n\t\t\tprintf(\"%dx%d=%d\\n\", i, j, i*j);\n\t\t}\n\t}\n\treturn 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void multiply(int *a, int *b, int *c) {\n\tint i = blockIdx.x * blockDim.x + threadIdx.x;\n\tint j = blockIdx.y * blockDim.y + threadIdx.y;\n\tif (i < 10 && j < 10) {\n\t\tc[i * 10 + j] = a[i] * b[j];\n\t}\n}\n\nint main(int argc, char const *argv[])\n{\n\tint a[10][10], b[10][10], c[10][10];\n\tint i, j;\n\tfor(i=0;i<10;i++) {\n\t\tfor(j=0;j<10;j++) {\n\t\t\ta[i][j] = i+1;\n\t\t\tb[i][j] = j+1;\n\t\t}\n\t}\n\n\tdim3 threadsPerBlock(16, 16);\n\tdim3 numBlocks((10+threadsPerBlock.x-1)/threadsPerBlock.x, (10+threadsPerBlock.y-1)/threadsPerBlock.y);\n\tmultiply<<<numBlocks, threadsPerBlock>>>(a, b, c);\n\n\tfor(i=0;i<10;i++) {\n\t\tfor(j=0;j<10;j++) {\n\t\t\tprintf(\"%dx%d=%d\\n\", i+1, j+1, c[i][j]);\n\t\t}\n\t}\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_79.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_79",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_79.cu(24): error: argument of type \"int (*)[10]\" is incompatible with parameter of type \"int *\"\n\n/tmp/tmpd9n9oeu2/program_79.cu(24): error: argument of type \"int (*)[10]\" is incompatible with parameter of type \"int *\"\n\n/tmp/tmpd9n9oeu2/program_79.cu(24): error: argument of type \"int (*)[10]\" is incompatible with parameter of type \"int *\"\n\n3 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_79.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s148401501.cpp",
    "original_c": "#include<iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n\tstring str;\n\tfor(int i = 1; i < 10; ++i)\n\t{\n\t\tfor(int j = 1; j < 10; ++j)\n\t\t{\n\t\t\tcout << i << 'x' << j << \"=\" << i * j << endl;\n\t\t}\n\t}\n    return 0;\n}",
    "translated_code": "#include<iostream>\n#include <string>\nusing namespace std;\n\n__global__ void print_table(int *table) {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx < 100) {\n        int i = idx / 10;\n        int j = idx % 10;\n        printf(\"%d x %d = %d\\n\", i, j, i * j);\n    }\n}\n\nint main() {\n    int *table;\n    cudaMalloc((void **)&table, 100 * sizeof(int));\n    print_table<<<1, 100>>>(table);\n    cudaDeviceSynchronize();\n    cudaFree(table);\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_80.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_80",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "9 x 6 = 54\n9 x 7 = 63\n9 x 8 = 72\n9 x 9 = 81\n0 x 0 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 9 = 0\n1 x 0 = 0\n1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n2 x 0 = 0\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n3 x 0 = 0\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n4 x 0 = 0\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n5 x 0 = 0\n5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n6 x 0 = 0\n6 x 1 = 6\n6 x 2 = 12\n6 x 3 = 18\n6 x 4 = 24\n6 x 5 = 30\n6 x 6 = 36\n6 x 7 = 42\n6 x 8 = 48\n6 x 9 = 54\n7 x 0 = 0\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n8 x 0 = 0\n8 x 1 = 8\n8 x 2 = 16\n8 x 3 = 24\n8 x 4 = 32\n8 x 5 = 40\n8 x 6 = 48\n8 x 7 = 56\n8 x 8 = 64\n8 x 9 = 72\n9 x 0 = 0\n9 x 1 = 9\n9 x 2 = 18\n9 x 3 = 27\n9 x 4 = 36\n9 x 5 = 45",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s150314734.cpp",
    "original_c": "#include <cstdio>\n#include <cstdlib>\n#include <cstdint>\n#include <cstring>\n#include <cctype>\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <list>\n#include <deque>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <unordered_map>\n#include <unordered_set>\n#include <algorithm>\n#include <functional>\nusing namespace std;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef long long ll;\nconst double PI = 3.141592653589793238462643383279502884L;\nconst int LARGE_INT = 1000000007;\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define tr(c, i) for(auto i = (c).begin(); i != (c).end(); i++)\n#define rtr(c, i) for(auto i = (c).rbegin(); i != (c).rend(); i++)\n#define repfn(i,a,cont,next) \\\n  for(auto i = (a); [=](){return(cont);}(); i = [=](){return(next);}())\n#define repby(i,a,b,s) repfn(i,a,i<b,i+s)\n#define repab(i,a,b) repby(i,a,b,1)\n#define rep(i,b) repab(i,0,b)\n#define pb push_back\n#define sz(c) int((c).size())\n\nint main(int argc, char **argv)\n{\n  repab(i, 1, 10) {\n    repab(j, 1, 10) {\n      printf(\"%dx%d=%d\\n\", i, j, i*j);\n    }\n  }\n  return 0;\n}",
    "translated_code": "#include <cstdio>\n#include <cstdlib>\n#include <cstdint>\n#include <cstring>\n#include <cctype>\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <list>\n#include <deque>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <unordered_map>\n#include <unordered_set>\n#include <algorithm>\n#include <functional>\nusing namespace std;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef long long ll;\nconst double PI = 3.141592653589793238462643383279502884L;\nconst int LARGE_INT = 1000000007;\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define tr(c, i) for(auto i = (c).begin(); i != (c).end(); i++)\n#define rtr(c, i) for(auto i = (c).rbegin(); i != (c).rend(); i++)\n#define repfn(i,a,cont,next) \\\n  for(auto i = (a); [=](){return(cont);}(); i = [=](){return(next);}())\n#define repby(i,a,b,s) repfn(i,a,i<b,i+s)\n#define repab(i,a,b) repby(i,a,b,1)\n#define rep(i,b) repab(i,0,b)\n#define pb push_back\n#define sz(c) int((c).size())\n\n__global__ void kernel(int *a, int *b) {\n  int idx = threadIdx.x + blockIdx.x * blockDim.x;",
    "source": "/tmp/tmpd9n9oeu2/program_81.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_81",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_81.cu(39): warning #177-D: variable \"idx\" was declared but never referenced\n\nAt end of source: error: expected a \"}\"\n\n/tmp/tmpd9n9oeu2/program_81.cu(24): warning #177-D: variable \"PI\" was declared but never referenced\n\n/tmp/tmpd9n9oeu2/program_81.cu(25): warning #177-D: variable \"LARGE_INT\" was declared but never referenced\n\n1 error detected in the compilation of \"/tmp/tmpd9n9oeu2/program_81.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s152727589.cpp",
    "original_c": "#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nclass c_main\n{\nprivate:\n    \npublic:\n    c_main();\n    void f_input();\n};\n\nc_main::c_main()\n{\n\n}\n\nvoid c_main::f_input()\n{\n    int i, j;\n    \n    for ( i = 1; i <= 9; ++i ){\n        for ( j = 1; j <= 9; ++j ){\n            cout << i << \"x\" <<  j << \"=\" << i * j << endl;\n        }\n    }\n}\n\nint main(){\n    c_main main01;\n    main01.f_input();\n    \n    return 0;\n}",
    "translated_code": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <cstdlib>\n#include <stack>\n#include <queue>\n#include <list>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\n__global__ void f_input(int *i, int *j)\n{\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx < 10)\n    {\n        for (int j = 1; j <= 9; ++j)\n        {\n            printf(\"%d x %d = %d\\n\", idx, j, idx * j);\n        }\n    }\n}\n\nint main()\n{\n    int *i, *j;\n    cudaMalloc((void **)&i, sizeof(int));\n    cudaMalloc((void **)&j, sizeof(int));\n\n    f_input<<<1, 10>>>(i, j);\n\n    cudaDeviceSynchronize();\n\n    cudaFree(i);\n    cudaFree(j);\n\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_82.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_82",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "0 x 1 = 0\n1 x 1 = 1\n2 x 1 = 2\n3 x 1 = 3\n4 x 1 = 4\n5 x 1 = 5\n6 x 1 = 6\n7 x 1 = 7\n8 x 1 = 8\n9 x 1 = 9\n0 x 2 = 0\n1 x 2 = 2\n2 x 2 = 4\n3 x 2 = 6\n4 x 2 = 8\n5 x 2 = 10\n6 x 2 = 12\n7 x 2 = 14\n8 x 2 = 16\n9 x 2 = 18\n0 x 3 = 0\n1 x 3 = 3\n2 x 3 = 6\n3 x 3 = 9\n4 x 3 = 12\n5 x 3 = 15\n6 x 3 = 18\n7 x 3 = 21\n8 x 3 = 24\n9 x 3 = 27\n0 x 4 = 0\n1 x 4 = 4\n2 x 4 = 8\n3 x 4 = 12\n4 x 4 = 16\n5 x 4 = 20\n6 x 4 = 24\n7 x 4 = 28\n8 x 4 = 32\n9 x 4 = 36\n0 x 5 = 0\n1 x 5 = 5\n2 x 5 = 10\n3 x 5 = 15\n4 x 5 = 20\n5 x 5 = 25\n6 x 5 = 30\n7 x 5 = 35\n8 x 5 = 40\n9 x 5 = 45\n0 x 6 = 0\n1 x 6 = 6\n2 x 6 = 12\n3 x 6 = 18\n4 x 6 = 24\n5 x 6 = 30\n6 x 6 = 36\n7 x 6 = 42\n8 x 6 = 48\n9 x 6 = 54\n0 x 7 = 0\n1 x 7 = 7\n2 x 7 = 14\n3 x 7 = 21\n4 x 7 = 28\n5 x 7 = 35\n6 x 7 = 42\n7 x 7 = 49\n8 x 7 = 56\n9 x 7 = 63\n0 x 8 = 0\n1 x 8 = 8\n2 x 8 = 16\n3 x 8 = 24\n4 x 8 = 32\n5 x 8 = 40\n6 x 8 = 48\n7 x 8 = 56\n8 x 8 = 64\n9 x 8 = 72\n0 x 9 = 0\n1 x 9 = 9\n2 x 9 = 18\n3 x 9 = 27\n4 x 9 = 36\n5 x 9 = 45\n6 x 9 = 54\n7 x 9 = 63\n8 x 9 = 72\n9 x 9 = 81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s154326116.cpp",
    "original_c": "#include <stdio.h>\nvoid QQ(int a,int b){\n\tif( a >= 10 ){\n\t\treturn ;\n\t}else if( b < 10 ){\n\t\tprintf(\"%dx%d=%d\\n\",a,b,a*b);\n\t\tQQ(a,b+1);\n\t}else{\n\t\tQQ(a+1,1);\n\t}\n}\n\nint main(){\n\tQQ(1,1);\n}",
    "translated_code": "#include <stdio.h>\n__global__ void QQ(int a,int b){\n\tif( a >= 10 ){\n\t\treturn ;\n\t}else if( b < 10 ){\n\t\tprintf(\"%dx%d=%d\\n\",a,b,a*b);\n\t\tQQ(a,b+1);\n\t}else{\n\t\tQQ(a+1,1);\n\t}\n}\n\nint main(){\n\tQQ<<<1,1>>>(1,1);\n\tcudaDeviceSynchronize();\n}",
    "source": "/tmp/tmpd9n9oeu2/program_83.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_83",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_83.cu(7): error: a __global__ function call must be configured\n\n/tmp/tmpd9n9oeu2/program_83.cu(9): error: a __global__ function call must be configured\n\n2 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_83.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s155183498.cpp",
    "original_c": "#include <iostream>\nusing namespace std;\n\nint main(){\n\tfor (int i = 1; i <= 9; i++){\n\t\tfor (int n = 1; n <= 9; n++){\n\t\t\tcout << i << \"x\" << n << \"=\"<<i*n<<endl;\n\t\t}\n\t\t}\n\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void print_table(int start, int end) {\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (i >= start && i <= end) {\n        for (int n = 1; n <= 9; n++) {\n            printf(\"%d x %d = %d\\n\", i, n, i * n);\n        }\n    }\n}\n\nint main() {\n    int start = 1;\n    int end = 9;\n    int blockSize = 256;\n    int numBlocks = (end - start + 1) / blockSize;\n    print_table<<<numBlocks, blockSize>>>(start, end);\n    cudaDeviceSynchronize();\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_84.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_84",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s155864961.cpp",
    "original_c": "#include<iostream>\nusing namespace std;\nint main(){\n\tint a,b;\nfor(int j = 1; j<10; j++){\n\ta = j;\n\t\n\tfor(int i = 1; i<10; i++){\n\t\tb = i;\n\t\t\n\t\tcout << a << \"x\" << b << \"=\" << a*b << endl;\n\t\t\n\n\t}\n}\n}",
    "translated_code": "#include<iostream>\nusing namespace std;\n__global__ void multiply(int *a, int *b, int *c, int n) {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx < n) {\n        c[idx] = a[idx] * b[idx];\n    }\n}\nint main() {\n    int a[10], b[10], c[10];\n    int n = 10;\n    for (int i = 0; i < n; i++) {\n        a[i] = i;\n        b[i] = i;\n    }\n    int *d_a, *d_b, *d_c;\n    cudaMalloc((void **)&d_a, n * sizeof(int));\n    cudaMalloc((void **)&d_b, n * sizeof(int));\n    cudaMalloc((void **)&d_c, n * sizeof(int));\n    cudaMemcpy(d_a, a, n * sizeof(int), cudaMemcpyHostToDevice);\n    cudaMemcpy(d_b, b, n * sizeof(int), cudaMemcpyHostToDevice);\n    multiply<<<1, n>>>(d_a, d_b, d_c, n);\n    cudaMemcpy(c, d_c, n * sizeof(int), cudaMemcpyDeviceToHost);\n    for (int i = 0; i < n; i++) {\n        cout << a[i] << \"x\" << b[i] << \"=\" << c[i] << endl;\n    }\n    cudaFree(d_a);\n    cudaFree(d_b);\n    cudaFree(d_c);\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_85.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_85",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "0x0=0\n1x1=1\n2x2=4\n3x3=9\n4x4=16\n5x5=25\n6x6=36\n7x7=49\n8x8=64\n9x9=81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s157516580.cpp",
    "original_c": "#include <iostream>\n\n\nint main()\n{\n\tfor(int i = 1; i < 10; i++) {\n\t\tfor(int k = 1; k < 10; k++) {\n\t\t\tint l = i * k;\n\t\t\tstd::cout << i << \"x\" << k << \"=\" << l<< std::endl;\n\t\t}\n\t}\n\treturn 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void print_table(int *table) {\n\tint i = blockIdx.x * blockDim.x + threadIdx.x;\n\tint k = blockIdx.y * blockDim.y + threadIdx.y;\n\tint l = i * k;\n\tprintf(\"%d x %d = %d\\n\", i, k, l);\n}\n\nint main() {\n\tint table[10][10];\n\tfor(int i = 0; i < 10; i++) {\n\t\tfor(int k = 0; k < 10; k++) {\n\t\t\ttable[i][k] = i * k;\n\t\t}\n\t}\n\n\tint *d_table;\n\tcudaMalloc((void **)&d_table, 10 * 10 * sizeof(int));\n\tcudaMemcpy(d_table, table, 10 * 10 * sizeof(int), cudaMemcpyHostToDevice);\n\n\tint threadsPerBlock = 16;\n\tint blocksPerGrid = (10 * 10 + threadsPerBlock - 1) / threadsPerBlock;\n\tprint_table<<<blocksPerGrid, threadsPerBlock>>>(d_table);\n\n\tcudaDeviceSynchronize();\n\tcudaFree(d_table);\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_86.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_86",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "16 x 0 = 0\n17 x 0 = 0\n18 x 0 = 0\n19 x 0 = 0\n20 x 0 = 0\n21 x 0 = 0\n22 x 0 = 0\n23 x 0 = 0\n24 x 0 = 0\n25 x 0 = 0\n26 x 0 = 0\n27 x 0 = 0\n28 x 0 = 0\n29 x 0 = 0\n30 x 0 = 0\n31 x 0 = 0\n64 x 0 = 0\n65 x 0 = 0\n66 x 0 = 0\n67 x 0 = 0\n68 x 0 = 0\n69 x 0 = 0\n70 x 0 = 0\n71 x 0 = 0\n72 x 0 = 0\n73 x 0 = 0\n74 x 0 = 0\n75 x 0 = 0\n76 x 0 = 0\n77 x 0 = 0\n78 x 0 = 0\n79 x 0 = 0\n0 x 0 = 0\n1 x 0 = 0\n2 x 0 = 0\n3 x 0 = 0\n4 x 0 = 0\n5 x 0 = 0\n6 x 0 = 0\n7 x 0 = 0\n8 x 0 = 0\n9 x 0 = 0\n10 x 0 = 0\n11 x 0 = 0\n12 x 0 = 0\n13 x 0 = 0\n14 x 0 = 0\n15 x 0 = 0\n96 x 0 = 0\n97 x 0 = 0\n98 x 0 = 0\n99 x 0 = 0\n100 x 0 = 0\n101 x 0 = 0\n102 x 0 = 0\n103 x 0 = 0\n104 x 0 = 0\n105 x 0 = 0\n106 x 0 = 0\n107 x 0 = 0\n108 x 0 = 0\n109 x 0 = 0\n110 x 0 = 0\n111 x 0 = 0\n80 x 0 = 0\n81 x 0 = 0\n82 x 0 = 0\n83 x 0 = 0\n84 x 0 = 0\n85 x 0 = 0\n86 x 0 = 0\n87 x 0 = 0\n88 x 0 = 0\n89 x 0 = 0\n90 x 0 = 0\n91 x 0 = 0\n92 x 0 = 0\n93 x 0 = 0\n94 x 0 = 0\n95 x 0 = 0\n32 x 0 = 0\n33 x 0 = 0\n34 x 0 = 0\n35 x 0 = 0\n36 x 0 = 0\n37 x 0 = 0\n38 x 0 = 0\n39 x 0 = 0\n40 x 0 = 0\n41 x 0 = 0\n42 x 0 = 0\n43 x 0 = 0\n44 x 0 = 0\n45 x 0 = 0\n46 x 0 = 0\n47 x 0 = 0\n48 x 0 = 0\n49 x 0 = 0\n50 x 0 = 0\n51 x 0 = 0\n52 x 0 = 0\n53 x 0 = 0\n54 x 0 = 0\n55 x 0 = 0\n56 x 0 = 0\n57 x 0 = 0\n58 x 0 = 0\n59 x 0 = 0\n60 x 0 = 0\n61 x 0 = 0\n62 x 0 = 0\n63 x 0 = 0",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s159208709.cpp",
    "original_c": "#include<iostream>\nusing namespace std;\n\nint main(){\n\tfor (int i = 1; i <= 9; i++)\n\t{\n\t\tfor (size_t j = 1; j <= 9; j++)\n\t\t{\n\t\t\tint ans = i * j;\n\t\t\tcout << i << \"x\" << j << \"=\" << ans << endl;\n\t\t}\n\t}\n    return 0;\n}",
    "translated_code": "#include<iostream>\nusing namespace std;\n\n__global__ void multiply(int *a, int *b, int *c, int n) {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx < n) {\n        c[idx] = a[idx] * b[idx];\n    }\n}\n\nint main() {\n    int n = 10;\n    int *a, *b, *c;\n    a = (int *)malloc(n * sizeof(int));\n    b = (int *)malloc(n * sizeof(int));\n    c = (int *)malloc(n * sizeof(int));\n\n    // Initialize a and b arrays\n    for (int i = 0; i < n; i++) {\n        a[i] = i + 1;\n        b[i] = i + 1;\n    }\n\n    // Allocate memory on the GPU\n    int *d_a, *d_b, *d_c;\n    cudaMalloc((void **)&d_a, n * sizeof(int));\n    cudaMalloc((void **)&d_b, n * sizeof(int));\n    cudaMalloc((void **)&d_c, n * sizeof(int));\n\n    // Copy data from host to device\n    cudaMemcpy(d_a, a, n * sizeof(int), cudaMemcpyHostToDevice);\n    cudaMemcpy(d_b, b, n * sizeof(int), cudaMemcpyHostToDevice);\n\n    // Launch the kernel\n    multiply<<<1, n>>>(d_a, d_b, d_c, n);\n\n    // Copy data from device to host\n    cudaMemcpy(c, d_c, n * sizeof(int), cudaMemcpyDeviceToHost);\n\n    // Free memory\n    cudaFree(d_a);\n    cudaFree(d_b);\n    cudaFree(d_c);\n\n    // Print the result\n    for (int i = 0; i < n; i++) {\n        cout << a[i",
    "source": "/tmp/tmpd9n9oeu2/program_87.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_87",
    "compile_stdout": "",
    "compile_stderr": "At end of source: error: expected a \"]\"\n\nAt end of source: error: expected a \";\"\n\nAt end of source: error: expected a \"}\"\n\nAt end of source: error: expected a \"}\"\n\n4 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_87.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s160425098.cpp",
    "original_c": "#include<iostream>\nusing namespace std;\n\nint main(){\n\n    for(int i = 1; i <= 9; i++)\n    {\n        for (int j = 1; j <= 9; j++)\n        {\n            cout << i << 'x' << j << '=' << i * j << endl;\n        }\n    }\n\n    return 0;\n}\n\n",
    "translated_code": "#include<iostream>\nusing namespace std;\n\n__global__ void print_table(int *table) {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx < 100) {\n        for (int i = 1; i <= 9; i++) {\n            for (int j = 1; j <= 9; j++) {\n                printf(\"%d x %d = %d\\n\", i, j, i * j);\n            }\n        }\n    }\n}\n\nint main() {\n    int *table;\n    cudaMalloc((void **)&table, sizeof(int) * 100);\n    print_table<<<1, 100>>>(table);\n    cudaDeviceSynchronize();\n    cudaFree(table);\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_88.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_88",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s160735704.cpp",
    "original_c": "#include<iostream>\n\nusing namespace std;\n\nint main(){\n\tint i,j;\n\t\n\tfor(i=1;i<10;i++){\n\t\tfor(j=1;j<10;j++){\n\t\t\tcout << i << \"x\" << j << \"=\" << i*j << '\\n';\n\t\t}\n\t}\n\treturn 0;\n}",
    "translated_code": "#include<iostream>\n\nusing namespace std;\n\n__global__ void multiply(int *a, int *b, int *c, int n) {\n    int i = threadIdx.x + blockIdx.x * blockDim.x;\n    if (i < n) {\n        c[i] = a[i] * b[i];\n    }\n}\n\nint main() {\n    int n = 10;\n    int *a, *b, *c;\n    a = (int *)malloc(n * sizeof(int));\n    b = (int *)malloc(n * sizeof(int));\n    c = (int *)malloc(n * sizeof(int));\n\n    // Initialize a and b arrays\n\n    multiply<<<1, n>>>(a, b, c, n);\n\n    // Print the result\n\n    free(a);\n    free(b);\n    free(c);\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_89.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_89",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s160759013.cpp",
    "original_c": "#include <iostream>\n#include <queue>\n#include <vector>\n#include <set>\n#include <algorithm>\n#include <stdio.h>\n#define int long long\ninline int in() { int32_t x; scanf(\"%d\", &x); return x ;}\nusing namespace std;\nconst int INF = 1e18;\nconst int MAX_N = 1e5 + 5;\nint32_t main()\n{\n    for (int i = 1 ; i <= 9 ; i ++)\n    {\n        for (int x = 1 ; x <= 9 ; x ++)\n        {\n//            printf(\"%d*%d=%d\",i,x,i*x);\n            cout << i << \"x\" << x << \"=\" << i * x;\n            cout << endl;\n        }\n    }\n}",
    "translated_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <time.h>\n#include <sys/time.h>\n#include <sys/resource.h>\n#include <unistd.h>\n#include <cuda.h>\n#include <cuda_runtime.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include <cuda_runtime_api.h>\n#include",
    "source": "/tmp/tmpd9n9oeu2/program_90.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_90",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_90.cu:43:9: error: #include expects \"FILENAME\" or <FILENAME>\n   43 | #include\n      |         ^",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s161932711.cpp",
    "original_c": "#include<iostream>\nusing namespace std;\nint main(){\n\tint x,y,z,w;\n\tfor (x = 1, z = 1; z <= 9; z++, x++){\n\t\tfor (y = 1, w = 1; w <= 9; w++, y++){\n\t\t\tcout << x << \"x\" << y << \"=\" << x * y << endl;\n\t\t}\n\t}\n\n\n\n\n\n\n\n\n\treturn 0;\n}\n",
    "translated_code": "#include<stdio.h>\n\n__global__ void multiply(int *a, int *b, int *c, int n) {\n\tint i = threadIdx.x + blockIdx.x * blockDim.x;\n\tif (i < n) {\n\t\tc[i] = a[i] * b[i];\n\t}\n}\n\nint main() {\n\tint n = 10;\n\tint *a, *b, *c;\n\ta = (int *)malloc(n * sizeof(int));\n\tb = (int *)malloc(n * sizeof(int));\n\tc = (int *)malloc(n * sizeof(int));\n\n\tfor (int i = 0; i < n; i++) {\n\t\ta[i] = i;\n\t\tb[i] = i;\n\t}\n\n\tint *d_a, *d_b, *d_c;\n\tcudaMalloc((void **)&d_a, n * sizeof(int));\n\tcudaMalloc((void **)&d_b, n * sizeof(int));\n\tcudaMalloc((void **)&d_c, n * sizeof(int));\n\n\tcudaMemcpy(d_a, a, n * sizeof(int), cudaMemcpyHostToDevice);\n\tcudaMemcpy(d_b, b, n * sizeof(int), cudaMemcpyHostToDevice);\n\n\tmultiply<<<1, n>>>(d_a, d_b, d_c, n);\n\n\tcudaMemcpy(c, d_c, n * sizeof(int), cudaMemcpyDeviceToHost);\n\n\tfor (int i = 0; i < n; i++) {\n\t\tprintf(\"%d * %d = %d\\n\", a[i], b[i], c[i]);\n\t}\n\n\tcudaFree(d_a);\n\tcudaFree(d_b);\n\tcudaFree(d_c);\n\n\tfree(a);\n\tfree(b);\n\tfree(c);\n\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_91.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_91",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "0 * 0 = 0\n1 * 1 = 1\n2 * 2 = 4\n3 * 3 = 9\n4 * 4 = 16\n5 * 5 = 25\n6 * 6 = 36\n7 * 7 = 49\n8 * 8 = 64\n9 * 9 = 81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s162786996.cpp",
    "original_c": "#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <cstdio>\n#include <string>\n#include <set>\n#include <queue>\n#include <stack>\n#include <cmath>\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<long long > vll;\ntypedef vector< vi > vvi;\nint main() {\n\tfor (int i = 1; i <= 9; i++) {\n\t\tfor (int j = 1; j <= 9; j++) {\n\t\t\tcout << i << 'x' << j << '=' << i*j << endl;\n\t\t}\n\t}\n}",
    "translated_code": "#include <stdio.h>\n#include <stdlib.h>\n\n__global__ void print_table(int start, int end) {\n\tint idx = threadIdx.x + blockIdx.x * blockDim.x;\n\tif (idx >= start && idx <= end) {\n\t\tfor (int i = 1; i <= 9; i++) {\n\t\t\tfor (int j = 1; j <= 9; j++) {\n\t\t\t\tprintf(\"%d x %d = %d\\n\", i, j, i*j);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tint start = 1;\n\tint end = 9;\n\tint blockSize = 25;\n\tint numBlocks = (end - start + 1 + blockSize - 1) / blockSize;\n\tprint_table<<<numBlocks, blockSize>>>(start, end);\n\tcudaDeviceSynchronize();\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_92.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_92",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 1 = 1\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 2 = 2\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 3 = 3\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 4 = 4\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 5 = 5\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 6 = 6\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 7 = 7\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 8 = 8\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n1 x 9 = 9\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 1 = 2\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 2 = 4\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 3 = 6\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 4 = 8\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 5 = 10\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 6 = 12\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 7 = 14\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 8 = 16\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n2 x 9 = 18\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 1 = 3\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n3 x 2 = 6\n3 x 3 = 9\n3 x 3 = 9\n3 x 3 = 9\n3 x 3 = 9\n3 x 3 = 9\n3 x 3 = 9\n3 x 3 = 9\n3 x 3 = 9\n3 x 3 = 9\n3 x 4 = 12\n3 x 4 = 12\n3 x 4 = 12\n3 x 4 = 12\n3 x 4 = 12\n3 x 4 = 12\n3 x 4 = 12\n3 x 4 = 12\n3 x 4 = 12\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 5 = 15\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 6 = 18\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 7 = 21\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 8 = 24\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n3 x 9 = 27\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 1 = 4\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 2 = 8\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 3 = 12\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 4 = 16\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 5 = 20\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 6 = 24\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 7 = 28\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 8 = 32\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n4 x 9 = 36\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 1 = 5\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 2 = 10\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 3 = 15\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 4 = 20\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 5 = 25\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 6 = 30\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 7 = 35\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 8 = 40\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n5 x 9 = 45\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 1 = 6\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 2 = 12\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 3 = 18\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 4 = 24\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 5 = 30\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 6 = 36\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 7 = 42\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 8 = 48\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n6 x 9 = 54\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 1 = 7\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 2 = 14\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 3 = 21\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 4 = 28\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 5 = 35\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 6 = 42\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 7 = 49\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 8 = 56\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n7 x 9 = 63\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 1 = 8\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 2 = 16\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 3 = 24\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 4 = 32\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 5 = 40\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 6 = 48\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 7 = 56\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 8 = 64\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n8 x 9 = 72\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 1 = 9\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 2 = 18\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 3 = 27\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 4 = 36\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 5 = 45\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 6 = 54\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 7 = 63\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 8 = 72\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81\n9 x 9 = 81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s165301314.cpp",
    "original_c": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<map>\n#include<deque>\n#include<cstring>\n#include<climits>\n#include<cassert>\n#include<cctype>\n\n#define REP(i,s,n) for(int i=s;i<n;++i)\n#define rep(i,n) REP(i,0,n)\n\nusing namespace std;\n\nint main() {\n  map<int,int> mp;\n  rep(i,9) rep(j,9) {\n    mp[i] = (int)mp.size();\n    cout << i+1 << 'x' << j+1 << '=' << (i+1)*(j+1) << endl;\n  }\n  \n  return 0;\n}",
    "translated_code": "#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<map>\n#include<deque>\n#include<cstring>\n#include<climits>\n#include<cassert>\n#include<cctype>\n\n#define REP(i,s,n) for(int i=s;i<n;++i)\n#define rep(i,n) REP(i,0,n)\n\nusing namespace std;\n\n__global__ void kernel(int *a, int *b) {\n  int idx = threadIdx.x + blockIdx.x * blockDim.x;\n  if (idx < 9) {\n    a[idx] = (idx+1)*(idx+1);\n    printf(\"%d x %d = %d\\n\", idx+1, idx+1, (idx+1)*(idx+1));\n  }\n}\n\nint main() {\n  int *a, *b;\n  cudaMalloc((void **)&a, 9*sizeof(int));\n  cudaMalloc((void **)&b, 9*sizeof(int));\n\n  kernel<<<1,9>>>(a, b);\n\n  cudaDeviceSynchronize();\n\n  cudaFree(a);\n  cudaFree(b);\n\n  return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_93.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_93",
    "compile_stdout": "",
    "compile_stderr": "/usr/include/c++/11/bits/std_function.h:435:145: error: parameter packs not expanded with \u2018...\u2019:\n  435 |         function(_Functor&& __f)\n      |                                                                                                                                                 ^ \n/usr/include/c++/11/bits/std_function.h:435:145: note:         \u2018_ArgTypes\u2019\n/usr/include/c++/11/bits/std_function.h:530:146: error: parameter packs not expanded with \u2018...\u2019:\n  530 |         operator=(_Functor&& __f)\n      |                                                                                                                                                  ^ \n/usr/include/c++/11/bits/std_function.h:530:146: note:         \u2018_ArgTypes\u2019",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s166989015.cpp",
    "original_c": "#include <iostream>\n#include <string>\n#include <cstring>\n#include <fstream>\n#include <algorithm>\n#include <iomanip>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <map>\n#include <list>\n#include <set>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <bitset>\n#include <functional>\n\nusing namespace std;\n\n#define FOR(i,n) \t\tfor(int(i)=0;(i)<(int)(n);(i)++)\n#define FORN(i,a,b,c) \tfor(int(i)=a;i<(int)(b);i+=(c))\n#define RES(x,nilai)\tmemset(x,nilai,sizeof(x));\n#define pb              push_back\n#define mp              make_pair\n#define INF\t\t\t\t1000000000\n\ntypedef long long ll;\ntypedef pair<int, int> ii;\ntypedef vector<int> vi;\ntypedef vector<ii> vii;\n\ninline string IS(int a){\n    char x[100];\n    sprintf(x,\"%d\",a); string s = x;\n    return s;\n}\n\ninline int SI(string a){\n    char x[100]; int res;\n    strcpy(x,a.c_str()); sscanf(x,\"%d\",&res);\n    return res;\n}\n\n//==============================================\n\nbool cmp(int x,int y) {return x>y;}\n\nint main() {\n\t//freopen(\"in.txt\",\"r\",stdin);\n\t//freopen(\"13.txt\",\"w\",stdout);\n\tios_base::sync_with_stdio(false); cin.tie(NULL);\n\t\n\tfor(int i =1; i <=9;i++) {\n        for(int j =1; j<=9;j++) {\ncout << i << 'x' << j << '=' << i*j << endl;\n}\n        }\n\t\t\n    return 0;\n}",
    "translated_code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define FOR(i,n) \t\tfor(int(i)=0;(i)<(int)(n);(i)++)\n#define FORN(i,a,b,c) \tfor(int(i)=a;i<(int)(b);i+=(c))\n#define RES(x,nilai)\tmemset(x,nilai,sizeof(x));\n#define pb              push_back\n#define mp              make_pair\n#define INF\t\t\t\t1000000000\n\ntypedef long long ll;\ntypedef pair<int, int> ii;\ntypedef vector<int> vi;\ntypedef vector<ii> vii;\n\ninline string IS(int a){\n    char x[100];\n    sprintf(x,\"%d\",a); string s = x;\n    return s;\n}\n\ninline int SI(string a){\n    char x[100]; int res;\n    strcpy(x,a.c_str()); sscanf(x,\"%d\",&res);\n    return res;\n}\n\n//==============================================\n\nbool cmp(int x,int y) {return x>y;}\n\nint main() {\n\t//freopen(\"in.txt\",\"r\",stdin);\n\t//freopen(\"13.txt\",\"w\",stdout);\n\tios_base::sync_with_stdio(false); cin.tie(NULL);\n\t\n\tfor(int i =1; i <=9;i++) {\n        for(int j =1; j<=9;j++) {\nprintf(\"%d x %d = %d\\n\",i,j,i*j);\n}\n        }\n\t\t\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_94.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_94",
    "compile_stdout": "",
    "compile_stderr": "/tmp/tmpd9n9oeu2/program_94.cu(12): error: pair is not a template\n\n/tmp/tmpd9n9oeu2/program_94.cu(13): error: vector is not a template\n\n/tmp/tmpd9n9oeu2/program_94.cu(14): error: vector is not a template\n\n/tmp/tmpd9n9oeu2/program_94.cu(16): error: identifier \"string\" is undefined\n\n/tmp/tmpd9n9oeu2/program_94.cu(18): error: identifier \"string\" is undefined\n\n/tmp/tmpd9n9oeu2/program_94.cu(22): error: identifier \"string\" is undefined\n\n/tmp/tmpd9n9oeu2/program_94.cu(35): error: name followed by \"::\" must be a class or namespace name\n\n/tmp/tmpd9n9oeu2/program_94.cu(35): error: identifier \"cin\" is undefined\n\n8 errors detected in the compilation of \"/tmp/tmpd9n9oeu2/program_94.cu\".",
    "compile_success": false,
    "run_stdout": "",
    "run_stderr": "Skipped due to compile error",
    "run_success": false
  },
  {
    "id": "s170966714.cpp",
    "original_c": "#include<iostream>\n#define REP(i,n) for(int (i)=0;(i)<(int)(n);(i)++)\nusing namespace std;\n\nint main(){\n    REP(i,9)REP(j,9)cout<<i+1<<\"x\"<<j+1<<\"=\"<<(i+1)*(j+1)<<endl;\n    return 0;\n}",
    "translated_code": "#include<stdio.h>\n#define REP(i,n) for(int (i)=0;(i)<(int)(n);(i)++)\nusing namespace std;\n\n__global__ void kernel(int *a, int n){\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if(idx < n){\n        REP(j,9)printf(\"%d x %d = %d\\n\", idx+1, j+1, (idx+1)*(j+1));\n    }\n}\n\nint main(){\n    int n = 9;\n    int *a;\n    cudaMalloc((void **)&a, n*n*sizeof(int));\n    kernel<<<1,n>>>(a, n);\n    cudaDeviceSynchronize();\n    cudaFree(a);\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_95.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_95",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n2 x 1 = 2\n3 x 1 = 3\n4 x 1 = 4\n5 x 1 = 5\n6 x 1 = 6\n7 x 1 = 7\n8 x 1 = 8\n9 x 1 = 9\n1 x 2 = 2\n2 x 2 = 4\n3 x 2 = 6\n4 x 2 = 8\n5 x 2 = 10\n6 x 2 = 12\n7 x 2 = 14\n8 x 2 = 16\n9 x 2 = 18\n1 x 3 = 3\n2 x 3 = 6\n3 x 3 = 9\n4 x 3 = 12\n5 x 3 = 15\n6 x 3 = 18\n7 x 3 = 21\n8 x 3 = 24\n9 x 3 = 27\n1 x 4 = 4\n2 x 4 = 8\n3 x 4 = 12\n4 x 4 = 16\n5 x 4 = 20\n6 x 4 = 24\n7 x 4 = 28\n8 x 4 = 32\n9 x 4 = 36\n1 x 5 = 5\n2 x 5 = 10\n3 x 5 = 15\n4 x 5 = 20\n5 x 5 = 25\n6 x 5 = 30\n7 x 5 = 35\n8 x 5 = 40\n9 x 5 = 45\n1 x 6 = 6\n2 x 6 = 12\n3 x 6 = 18\n4 x 6 = 24\n5 x 6 = 30\n6 x 6 = 36\n7 x 6 = 42\n8 x 6 = 48\n9 x 6 = 54\n1 x 7 = 7\n2 x 7 = 14\n3 x 7 = 21\n4 x 7 = 28\n5 x 7 = 35\n6 x 7 = 42\n7 x 7 = 49\n8 x 7 = 56\n9 x 7 = 63\n1 x 8 = 8\n2 x 8 = 16\n3 x 8 = 24\n4 x 8 = 32\n5 x 8 = 40\n6 x 8 = 48\n7 x 8 = 56\n8 x 8 = 64\n9 x 8 = 72\n1 x 9 = 9\n2 x 9 = 18\n3 x 9 = 27\n4 x 9 = 36\n5 x 9 = 45\n6 x 9 = 54\n7 x 9 = 63\n8 x 9 = 72\n9 x 9 = 81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s172721492.cpp",
    "original_c": "#define _CRT_SECURE_NO_WARNINGS\n#include <cstdio>\n#include <iostream>\n#include <vector>\n#include <list>\n#include <map>\n#include<string>\n#include <algorithm>\n#include <functional>\n#include <cmath>\nusing namespace std;\ntypedef vector <int> ivector;\n\nint main(){\n\t\n\tfor (int i = 1; i <= 9; i++){\n\t\tfor (int j = 1; j <= 9; j++){\n\t\t\tcout << i << \"x\" << j <<\"=\"<< i*j << endl;\n\t\t}\n\t}\n\n\treturn 0;\n}",
    "translated_code": "#include <stdio.h>\n#include <stdlib.h>\n\n__global__ void print_table(int *table) {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx < 100) {\n        printf(\"%d x %d = %d\\n\", idx / 10, idx % 10, table[idx]);\n    }\n}\n\nint main() {\n    int *table;\n    cudaMallocManaged(&table, 100 * sizeof(int));\n    for (int i = 1; i <= 9; i++) {\n        for (int j = 1; j <= 9; j++) {\n            table[i * 10 + j] = i * j;\n        }\n    }\n    int blockSize = 10;\n    int numBlocks = (100 + blockSize - 1) / blockSize;\n    print_table<<<numBlocks, blockSize>>>(table);\n    cudaDeviceSynchronize();\n    cudaFree(table);\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_96.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_96",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 0 = 0\n1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n4 x 0 = 0\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n7 x 0 = 0\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n3 x 0 = 0\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n2 x 0 = 0\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n8 x 0 = 0\n8 x 1 = 8\n8 x 2 = 16\n8 x 3 = 24\n8 x 4 = 32\n8 x 5 = 40\n8 x 6 = 48\n8 x 7 = 56\n8 x 8 = 64\n8 x 9 = 72\n9 x 0 = 0\n9 x 1 = 9\n9 x 2 = 18\n9 x 3 = 27\n9 x 4 = 36\n9 x 5 = 45\n9 x 6 = 54\n9 x 7 = 63\n9 x 8 = 72\n9 x 9 = 81\n5 x 0 = 0\n5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n0 x 0 = 0\n0 x 1 = 0\n0 x 2 = 0\n0 x 3 = 0\n0 x 4 = 0\n0 x 5 = 0\n0 x 6 = 0\n0 x 7 = 0\n0 x 8 = 0\n0 x 9 = 0\n6 x 0 = 0\n6 x 1 = 6\n6 x 2 = 12\n6 x 3 = 18\n6 x 4 = 24\n6 x 5 = 30\n6 x 6 = 36\n6 x 7 = 42\n6 x 8 = 48\n6 x 9 = 54",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s175922402.cpp",
    "original_c": "#include<iostream>\n\nint main(){\n\tint a,b;\n\tfor(a=1;a<10;a++){\n\t\tfor(b=1;b<10;b++){\n\t\t\tstd::cout<<a<<\"x\"<<b<<\"=\"<<a*b<<std::endl;\n\t\t\t}\n\t\t}\n\t\n\t\t\n\t\n\treturn 0;\n\t}",
    "translated_code": "#include<stdio.h>\n\n__global__ void multiply(int *a, int *b, int *c){\n\tint i = threadIdx.x;\n\tc[i] = a[i] * b[i];\n}\n\nint main(){\n\tint a[10], b[10], c[10];\n\tfor(int i=0;i<10;i++){\n\t\ta[i] = i+1;\n\t\tb[i] = i+1;\n\t}\n\t\n\tmultiply<<<1,10>>>(a,b,c);\n\t\n\tfor(int i=0;i<10;i++){\n\t\tprintf(\"%d x %d = %d\\n\",a[i],b[i],c[i]);\n\t}\n\t\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_97.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_97",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 0\n2 x 2 = 0\n3 x 3 = 124\n4 x 4 = 119\n5 x 5 = 110\n6 x 6 = 91\n7 x 7 = 389559248\n8 x 8 = 22398\n9 x 9 = 134192\n10 x 10 = 0",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s178536876.cpp",
    "original_c": "#include <iostream>\nusing namespace std;\n \nint main()\n{\n\tfor(int a =1;a<10;a++)\n\t\tfor(int b =1;b<10;b++)\n\t\t\tcout<<a<<\"x\"<<b<<\"=\"<<a*b<<endl;\n\treturn 0;\n}",
    "translated_code": "#include <stdio.h>\n\n__global__ void print_table(int a, int b)\n{\n    printf(\"%d x %d = %d\\n\", a, b, a*b);\n}\n\nint main()\n{\n    int a, b;\n    for(a = 1; a < 10; a++)\n        for(b = 1; b < 10; b++)\n            print_table<<<1,1>>>(a, b);\n    cudaDeviceSynchronize();\n    return 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_98.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_98",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n6 x 1 = 6\n6 x 2 = 12\n6 x 3 = 18\n6 x 4 = 24\n6 x 5 = 30\n6 x 6 = 36\n6 x 7 = 42\n6 x 8 = 48\n6 x 9 = 54\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n8 x 1 = 8\n8 x 2 = 16\n8 x 3 = 24\n8 x 4 = 32\n8 x 5 = 40\n8 x 6 = 48\n8 x 7 = 56\n8 x 8 = 64\n8 x 9 = 72\n9 x 1 = 9\n9 x 2 = 18\n9 x 3 = 27\n9 x 4 = 36\n9 x 5 = 45\n9 x 6 = 54\n9 x 7 = 63\n9 x 8 = 72\n9 x 9 = 81",
    "run_stderr": "",
    "run_success": true
  },
  {
    "id": "s179304460.cpp",
    "original_c": "#include<iostream>\nusing namespace std;\n\nint main(){\n\n\tfor (int i = 0; i < 9; i++){\n\t\tfor (int j = 0; j < 9; j++){\n\t\t\tcout << i + 1 << \"x\" << j + 1 << \"=\" << (i+1)*(j+1) << endl;\n\t\t}\n\t}\n\t//getchar();\n\n\treturn 0;\n}",
    "translated_code": "#include<iostream>\nusing namespace std;\n\n__global__ void print_table(int *table){\n\tint i = blockIdx.x * blockDim.x + threadIdx.x;\n\tint j = blockIdx.y * blockDim.y + threadIdx.y;\n\tif (i < 9 && j < 9){\n\t\tprintf(\"%d x %d = %d\\n\", i + 1, j + 1, (i+1)*(j+1));\n\t}\n}\n\nint main(){\n\tint table[9][9];\n\tfor (int i = 0; i < 9; i++){\n\t\tfor (int j = 0; j < 9; j++){\n\t\t\ttable[i][j] = (i+1)*(j+1);\n\t\t}\n\t}\n\n\tint *d_table;\n\tcudaMalloc((void **)&d_table, 9*9*sizeof(int));\n\tcudaMemcpy(d_table, table, 9*9*sizeof(int), cudaMemcpyHostToDevice);\n\n\tdim3 threadsPerBlock(9, 9);\n\tdim3 numBlocks((9+threadsPerBlock.x-1)/threadsPerBlock.x, (9+threadsPerBlock.y-1)/threadsPerBlock.y);\n\tprint_table<<<numBlocks, threadsPerBlock>>>(d_table);\n\n\tcudaDeviceSynchronize();\n\tcudaFree(d_table);\n\n\treturn 0;\n}",
    "source": "/tmp/tmpd9n9oeu2/program_99.cu",
    "executable": "/tmp/tmpd9n9oeu2/program_99",
    "compile_stdout": "",
    "compile_stderr": "",
    "compile_success": true,
    "run_stdout": "2 x 8 = 16\n3 x 8 = 24\n4 x 8 = 32\n5 x 8 = 40\n6 x 8 = 48\n7 x 8 = 56\n8 x 8 = 64\n9 x 8 = 72\n1 x 9 = 9\n2 x 9 = 18\n3 x 9 = 27\n4 x 9 = 36\n5 x 9 = 45\n6 x 9 = 54\n7 x 9 = 63\n8 x 9 = 72\n9 x 9 = 81\n1 x 1 = 1\n2 x 1 = 2\n3 x 1 = 3\n4 x 1 = 4\n5 x 1 = 5\n6 x 1 = 6\n7 x 1 = 7\n8 x 1 = 8\n9 x 1 = 9\n1 x 2 = 2\n2 x 2 = 4\n3 x 2 = 6\n4 x 2 = 8\n5 x 2 = 10\n6 x 2 = 12\n7 x 2 = 14\n8 x 2 = 16\n9 x 2 = 18\n1 x 3 = 3\n2 x 3 = 6\n3 x 3 = 9\n4 x 3 = 12\n5 x 3 = 15\n6 x 3 = 18\n7 x 3 = 21\n8 x 3 = 24\n9 x 3 = 27\n1 x 4 = 4\n2 x 4 = 8\n3 x 4 = 12\n4 x 4 = 16\n5 x 4 = 20\n6 x 4 = 24\n7 x 4 = 28\n8 x 4 = 32\n9 x 4 = 36\n1 x 5 = 5\n2 x 5 = 10\n3 x 5 = 15\n4 x 5 = 20\n5 x 5 = 25\n6 x 5 = 30\n7 x 5 = 35\n8 x 5 = 40\n9 x 5 = 45\n1 x 6 = 6\n2 x 6 = 12\n3 x 6 = 18\n4 x 6 = 24\n5 x 6 = 30\n6 x 6 = 36\n7 x 6 = 42\n8 x 6 = 48\n9 x 6 = 54\n1 x 7 = 7\n2 x 7 = 14\n3 x 7 = 21\n4 x 7 = 28\n5 x 7 = 35\n6 x 7 = 42\n7 x 7 = 49\n8 x 7 = 56\n9 x 7 = 63\n1 x 8 = 8",
    "run_stderr": "",
    "run_success": true
  }
]